<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//    Copyright (C) 2010 OutFlop
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');


class OSPokerMessageboxTestCase extends OsPokerWebTestCase {

  protected $skel_user;

  public static function getInfo() {
    return array(
      'name'        => '6.9 Main Navigation: Messages',
      'description' => 'Test the messagebox functions',
      'group'       => 'OS Poker Specifications',
    );
  }

  function setUp() {
    parent::setUp();
    $this->users[0] = $this->OsPokerCreateUserWithProfile();
    $this->users[1] = $this->OsPokerCreateUserWithProfile();

    $this->drupalLogin($this->users[0]);
  }

  function tearDown() {
    parent::tearDown();
  }

	/*
	 * Test that the messagebox Reset code is triggered when reading the messages
	 */
  function testMessageboxReset(){
			// Test that the messagebox page loads the os_poker.messageboxreset.js script.
			// we already tested in tests.js, that this file will reset the unread message counter.
			$body = $this->drupalGet("poker/messagebox/");
			$this->pass('<pre>' . $body . '</pre>', 'Body');
			$re = '#<script[^>]*?type=[\'"]text/javascript[\'"][^>]*src=[\'"][^>]*modules/os_poker/js/os_poker\.messageboxreset\.js[^>]*[\'"]></script>#';
			$this->pass($re, 'Regex');
			$this->assertPattern('#<script[^>]*?type=[\'"]text/javascript[\'"][^>]*src=[\'"][^>]*modules/os_poker/js/os_poker.messageboxreset.js[^>]*[\'"]></script>#');
	}

	/*
	 * Test the 'unread' logic for messagebox.
	 * Login as user[0]
	 * Send a gift to user[1]
	 * Verify that the message has is_read set to 0.
	 */
	function testMessageboxUnread() {
			// setup a simple shop
			$category = array('id_category' => 1,
												'name' => 'Test Category',
					);

			$item = array('id_category' => 1,
										'id_item' => 1,
										'name' => 'Water',
										'picture' => 'sites/default/files/poker_items/wasser.gif',
										'price' => 4,
										'available' => 1,
										'ttl' => '+5 minutes',
					);
			$this->OsPokerSetupShop(array($category), array($item));

			// XXX - move this to OsPokerWebTestCase
			// Send this item to user[1]
			$path = "poker/shop/shop/1/buddy/" . $this->users[1]->uid;
			$edit = array('shop_action' => 'subtarget',
										'shop_item' => $item['id_item'],
										'shop_item_activate' => 1,
					);
			$submit = 'Send';
			$this->drupalPost($path, $edit, $submit);
			
			// Verify the message has been sent to the inbox and is unread
			$user_tasks = CScheduler::instance()->GetUserTasks($this->users[1]->uid);
			$tasks = array_values($user_tasks['inbox']);
			$this->assertEqual(count($tasks), 1, "One message added to database");
			$this->assertEqual($tasks[0]->is_read, 0, "Message is unread");

			// Now open the messagebox as user[1]
	    $this->drupalLogin($this->users[1]);
			$this->drupalGet('poker/messagebox');
			
			// Verify the message is now unread
			$user_tasks = CScheduler::instance()->GetUserTasks($this->users[1]->uid);
			$tasks = array_values($user_tasks['inbox']);
			$this->assertEqual(count($tasks), 1, "Still only one message added to database");
			$this->assertEqual($tasks[0]->is_read, 1, "Message is now read");

			// verify that the os_poker_load_messagebox returns correctly
			$response_json = $this->drupalGet('poker/messages/send', array('query' => 'type=os_poker_load_messagebox&msgcount=0&ajax=1'));
			$this->pass($response_json, 'Response JSON1');
			$response = json_decode($response_json);
			$this->assertEqual(count($response->messages), 1, "One ajax response");
			$msg = end($response->messages);
			$this->assertEqual($msg->type, 'noop', 'Ajax returns 0 unread messages');
			
			// Now send another message
	    $this->drupalLogin($this->users[0]);
			$this->drupalPost($path, $edit, $submit);

			// Verify that one message is now unread
	    $this->drupalLogin($this->users[1]);
			$user_tasks = CScheduler::instance()->GetUserTasks($this->users[1]->uid);
			$tasks = array_values($user_tasks['inbox']);
			$this->assertEqual(count($tasks), 2, "Two messages added to database");
			$unread_count = 0;
			foreach ($tasks as $task) {
					if (!$task->is_read) {
							$unread_count++;
					}
			}
			$this->assertEqual($unread_count, 1, "One messages is unread");
			
			// verify that the os_poker_load_messagebox returns 1 unread message
			$response_json = $this->drupalGet('poker/messages/send', array('query' => 'type=os_poker_load_messagebox&msgcount=0&ajax=1'));
			$this->pass($response_json, 'Response JSON');
			$response = json_decode($response_json);
			$this->assertEqual(count($response->messages), 1, "One ajax response");
			$msg = end($response->messages);
			$this->assertEqual($msg->type, 'os_poker_messagebox', 'Ajax updates unread message count correctly');
			$this->assertEqual($msg->body->inbox, 1, 'Ajax updates unread message count correctly');
	}
}
