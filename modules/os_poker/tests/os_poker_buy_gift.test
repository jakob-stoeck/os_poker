<?php
// -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


/**
 * @file
 * Poker Gadget test case
 *
 */

/**
 * Includes the custom test case class with basic site configuration.
 */
require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

/**
 *
 */
class OSPokerBuyGiftTestCase extends OsPokerWebTestCase {
  public function getInfo() {
    return array(
      'name' => 'OS Poker Buy Gift',
      'description' => 'Test buying gift (this should be in 5.5)',
      'group' => 'OS Poker',
    );
  }

  public function setUp() {
    parent::setUp();
    $this->userManager = CUserManager::instance();
    //Create three users
    for ($i = 0; $i < 4; $i++) {
      $buddy = $this->users[] = $this->OsPokerCreateUserWithProfile();

    }
    $this->user = $this->users[0];
    $this->OsPokerCreateBuddyRelationShip($this->users[0], $this->users[1]);
    $this->OsPokerCreateBuddyRelationShip($this->users[0], $this->users[2]);
    $this->drupalLogin($this->user);
  }

  public function tearDown() {
    parent::tearDown();
    $this->drupalLogout();
  }

  public function assertItemItemBoughtFor($item_id, $uid, $active=NULL) {
    $items = $this->userManager->User($uid)->Items();
    $item = end($items);
    //$this->pass('<pre>'.print_r($item, true).'</pre>');
    $this->assertEqual($item->id_item, $item_id, t('Item with id=!id bought for user with uid=!uid', array('!id' => $item_id, '!uid' => $uid)));
    if($active !== NULL) {
       //$this->assertEqual($item->active, $active, t('Item with id=!id activated for user with uid=!uid', array('!id' => $item_id, '!uid' => $uid)));
    }
  }

  public function assertLiveMessage($uid) {
    CScheduler::instance()->ReloadTasks();
    CScheduler::instance()->Trigger("live"); //Trigger live, and fill message spooler
		$messages = CMessageSpool::instance()->Get();
    $this->pass('<pre>'.print_r($messages, true).'</pre>');
  }

  public function testBuy() {
    CUserManager::instance()->DebugForceCurrentUser($this->user->uid);
    $table_id = $this->createPokerTable('foo');
    $this->joinPokerTable($this->users[0], $table_id);
    $this->joinPokerTable($this->users[1], $table_id);
    $this->joinPokerTable($this->users[3], $table_id);

    $this->pass('<h1>Test from personal view</h1>');

    $this->pass('<h2>Buy</h2>');
    $this->drupalPost('poker/shop/shop/1/self', array(
      'shop_action' => 'subtarget',
      'shop_item' => '1',
    ), 'Send');
    $this->assertItemItemBoughtFor(1, $this->user->uid);
    $this->pass('<h2>Buy for Buddies</h2>');
    $this->drupalPost('poker/shop/shop/1/self', array(
      'shop_action' => 'target',
      'shop_item' => '2',
    ), 'Send');
    for($i = 1; $i < 3; $i++) {
      $this->assertItemItemBoughtFor(2, $this->users[$i]->uid, true);
    }

    $this->pass('<h1>Test from Buddy view</h1>');

    $this->pass('<h2>Buy</h2>');
    $this->drupalPost('poker/shop/shop/1/buddy/'.$this->users[1]->uid, array(
      'shop_action' => 'subtarget',
      'shop_item' => '3',
    ), 'Send');
    $this->assertItemItemBoughtFor(3, $this->users[1]->uid, true);

    $this->pass('<h2>Buy for Buddies</h2>');
    $this->drupalPost('poker/shop/shop/1/buddy/'.$this->users[1]->uid, array(
      'shop_action' => 'target',
      'shop_item' => '4',
    ), 'Send');
    for($i = 1; $i < 3; $i++) {
      $this->assertItemItemBoughtFor(4, $this->users[$i]->uid, true);
    }

    $this->pass('<h1>Test from Table view</h1>');

    $this->pass('<h2>Buy</h2>');
    $this->drupalPost('poker/shop/shop/1/table//'.$this->users[1]->uid, array(
      'shop_action' => 'subtarget',
      'shop_item' => '5',
    ), 'Send');
    $this->assertItemItemBoughtFor(5, $this->users[1]->uid, true);
    $this->pass('<h2>Buy fo Table</h2>');
    $this->drupalPost('poker/shop/shop/1/table/'.$table_id.'/'.$this->users[1]->uid, array(
      'shop_action' => 'target',
      'shop_item' => '6',
    ), 'Send');
    $this->assertItemItemBoughtFor(6, $this->users[1]->uid, true);
    $this->assertItemItemBoughtFor(6, $this->users[3]->uid, true);

    $this->pass('<h2>Buy for Table and Buddies</h2>');
    $this->drupalPost('poker/shop/shop/1/table/'.$table_id.'/'.$this->users[1]->uid, array(
      'shop_action' => 'special',
      'shop_item' => '7',
    ), 'Send');
    for($i = 1; $i < 4; $i++) {
      $this->assertItemItemBoughtFor(7, $this->users[$i]->uid, true);
    }
  }
}