<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


/**
 * @file
 * Os Poker test case: Testing framework for OS Poker specification testing.
 *
 * Enable site modules and configure them to create a full working copy of the
 * web site to be used as test environment.
 */


/**
 * Needed to prevent shindig_integrator from writing Config.php on install
 */
global $TEST;
$TEST = TRUE;

/**
 * Parent class for specification testing
 */
class OsPokerWebTestCase extends DrupalWebTestCase {


  /**
   * The current user logged in using the internal browser.
   *
   * @var bool
   */
  protected $loggedInUser = FALSE;

  /**
   * Implementation of setUp().
   *
   * Install all required modules and setup configuration.
   */
  function setUp() {
    static $run_once;

    // Only do the setUp once per test case, not once per function call.
    if (!isset($run_once)) {

      /**
       * Enable required modules.
       */

      // http://drupal.org/node/610072 Currently setUp only accept one argument,
      // this is a custom "Call parent::setUp()", to include more than just one
      // module by childs of this class.
      $args = func_get_args();
      array_unshift($args,
        'profile',
        'shindig_integrator',
        'remember_me',
        'password_policy',
        'locale',
        'token',
        'invite',
        'user_relationships_api',
        'user_relationships_ui',
        'user_relationship_invites',
        'user_relationship_blocks',
        'user_relationship_mailer',
        'simple_payments',
        'countries_api',
        'os_poker'
      );
      call_user_func_array(array('parent', 'setUp'), $args);

      /**
       *  Set default application theme.
       */
  		$this->setTheme('poker');

      /**
       *  Set default application permissions.
       */
      // Enable permissions to 'anonymous user' and 'authenticated user'
      $roles = array(
        'authenticated user'
      );
      $permissions = array(
        'send invitations',
        'send mass invitations',
        'track invitations',
        'withdraw accepted invitations',
        'view application canvas',
        'access user profiles',
        'can have relationships',
        'maintain own relationships',
        'view user relationships',
      );
      $result = $this->_add_permissions($roles, $permissions);


      // Create a default node to be set as Front page


      // Configure blocks and visibility..


      global $os_poker_db_query_override;
      $os_poker_db_query_override = "db_query";
      os_poker_get_poker_app_id(TRUE);

      $root = $this->drupalCreateUser(array('administer blocks', 'administer users', 'administer site configuration'));
      $this->drupalLogin($root);
      //$this->drupalPost('poker/first_profile', array(), t('Send'));
      $this->drupalPost('admin/build/block',
        array(
          'os_poker_8[region]' => 'middle_content_right',
          'os_poker_0[region]' => 'header',
          'os_poker_2[region]' => 'bottom_content',
          'user_0[region]' => 'header'
        ),
      t('Save blocks'));

      // Enable brief header os poker block only for authenticated users.
      $this->drupalPost('admin/build/block/configure/os_poker/0', array('roles[2]' => 1) , t('Save block'));

      $this->drupalPost('admin/user/settings', array('user_register' => '1', 'user_email_verification' => FALSE, 'user_pictures' => '1'), t('Save configuration'));
      $this->drupalPost('admin/settings/site-information', array('site_frontpage' => 'node'), t('Save configuration'));


      // Creates password policy
      // NOTE: This should probably be moved into os_poker_enable() or os_poker_install() in os_poker.install
      $policy = new stdClass();
      $policy->pid = '1';
      $policy->name = 'Min length';
      $policy->description = 'Password must contains at least 6 characters';
      $policy->enabled = true;
      $policy->policy = serialize(array('length' => '6'));
      $policy->created = time();
      $policy->expiration = 0;
      $policy->warning = '';
      drupal_write_record('password_policy', $policy);

      $this->drupalLogout($root);

      // $run_once = TRUE;
    }
  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    global $os_poker_db_query_override;
    $os_poker_db_query_override = "db_query";
    if(isset($this->POKER_DB)) {
      $previous_db = db_set_active($this->createPokerDatabase());
      db_query("TRUNCATE TABLE pokertables");
      db_query("TRUNCATE TABLE user2table");
      db_set_active($previous_db);
    }
    parent::tearDown();
  }

  /**
   * Completes the Sign up operation for an user.
   *
   * @param array $options valid "mail" and "pass" fields for sign up form
   */
  function OsPokerSignUpUser($options = array()){

    // Set valid default values for the signup
    $options += array(
      'mail'    => $this->randomName() . '@' . $this->randomName() .".com",
      'pass' => $this->randomName(),
    );
  	$this->drupalPost('', $options, t('Send'));

    // Verify page is found and access is granted.
    $this->assertResponse(
      '200',
      t("The Sign Up submission produces no errors.")
    );

    // Make sure the request has been redirected to first profile page.
		$this->assertTrue(
      strpos($this->getUrl(),
      'poker/first_profile'),
      t('Request redirected to profile page, signup accepted.')
    );

  }

  /**
   * Completes the login operation (including registration form) for an user.
   *
   * @param stdClass $user objet to log in.
   * @param array $profile options to complete registration.
   */
  function OsPokerLogin(stdClass $user, $profile = array()){

    // First login using the login form.
    $result = $this->drupalLogin($user);

    // Fill the user profile.
    $this->OsPokerProfileSubmit($profile);
  }


  /**
   * Skips the profile submission
	 * TODO : move to 4.2 test, does not belong here
   */
  function OsPokerProfileSkip() {

    // check if profile page is there..
    $this->assertText(
      t('Create your Profile'),
      t('After first login the profile page is shown to the user.')
    );

    // Submit default form
    $this->drupalPost('poker/first_profile', array(), t('Send'));

    // Once submitted, the form should dissapear.
    $this->assertNoField(
      'profile_nickname',
      t('User %name completed registration.', array('%name' => $user->name)),
      t('User login')
    );

  }

  /**
   * Submits the user profile with default and optional values.
   *
   * Requires the user to be logged in and landed in profile page.
   * @param array $profile information to be submitted.
   */
  function OsPokerProfileSubmit($profile = array()) {

    $profile += array(
      'profile_nickname' => $this->randomName(),
      'profile_gender'   => t('Male'),
      'profile_country'  => 'FR',
      'profile_city'     => $this->randomName(),
			'files[picture_upload]' => drupal_get_path('module', 'os_poker'). '/avatar1.png',
    );
    $this->drupalPost('poker/profile/update', $profile, t('Send'));
  }

  function OsPokerCreateUserWithProfile($profile=array(), $permissions=array('access comments', 'access content', 'post comments', 'post comments without approval')) {
    return $this->drupalCreateUser($permissions, $profile);
  }

  function OsPokerSendInvites($invites) {
    if (!count ($invites)) {
      return;
    }

    // build invite form with values..
    $cntr = 1;
    $invite = array();
    foreach ($invites as $name => $email) {
      $invite['name_' . $cntr] = $name;
      $invite['mail_' . $cntr] = $email;
      $cntr++;
    }

    // Submit the form.
    $this->drupalPost('poker/buddies/invite', $invite, t('Send invite'));
    // verify form is accepted.
    $this->assertText(
      t('been successfully sent. You will be notified when'),
      t('Invitation(s) successfully sent.')
    );

    // verify the invitation has been tracked for this user.
    $this->drupalGet('poker/buddies/invitedlist');
    foreach ($invites as $name => $email) {
      $this->assertText(
        $email,
        t('Invitation for %name is tracked.', array('%name' => $name))
      );
    }
  }

	function OsPokerSetupShop($categories, $items) {
			foreach ($categories as $category) {
					$sql = "INSERT INTO {poker_category} VALUES (%d, '%s')";
					$this->assertTrue(db_query($sql, $category['id_category'], $category['name']), "Setting up category: " . $cateogry['name']);
			}

			foreach ($items as $item) {
					$sql = "INSERT INTO {poker_item} VALUES (%d, %d, '%s', '%s', %d, %d, '%s')";
					$this->assertTrue(db_query($sql, 
																		 $item['id_item'],
																		 $item['id_category'],
																		 $item['picture'],
																		 $item['name'], // name
																		 $item['price'], // Price
																		 $item['available'],
																		 $item['ttl']
																), "Setting up Item: " . $item['name']);
			}
	}

  function OsPokerCreateBuddyRelationShip($user1, $user2) {
    static $buddy_rtid;
    if(!isset($buddy_rtid)) {
      $buddy_rtid = user_relationships_type_load(array("name" => "buddy"))->rtid;
    }
    if(count($relationships = user_relationships_load(array("between" => array($user1->uid, $user2->uid), 'rtid' => $rtid))) == 0) {
      $relationship = new stdClass();
      $relationship->requester_id = $user1->uid;
      $relationship->requestee_id = $user2->uid;
      $relationship->rtid =  $buddy_rtid;
    } else {
      $relationship = reset($relationships);
    }
    $this->assertTrue(user_relationships_save_relationship($relationship, 'approve'), t('Buddy relationship created between %user1 and %user2', array(
      '%user1' => $user1->name,
      '%user2' => $user2->name,
    )), 'OS Poker');

  }

  /**
   * Assert that the most recently sent e-mail message is an invitation for a
   * user.
   *
   * @param $value
   *   Value of the subject to assert.
   * @param $message
   *   Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertInviteMail($value = '', $message = '') {
    $captured_emails = variable_get('drupal_test_email_collector', array());
    $email = end($captured_emails);
    $this->assertTrue($email && isset($email['id']) && $email['id'] == 'invite_invite', t('Last sent email is an invitation.'), t('E-mail'));
    return $this->assertTrue($email && isset($email['to']) && $email['to'] == $value, $message, t('E-mail'));
  }


  /**
   * Enables a theme.
   */
  protected function setTheme($new_theme) {
    $this->assertTrue(db_query("update {system} set status=1 where type = 'theme' and name = '%s'", $new_theme), "Theme: $new_theme set as default");
    variable_set('theme_default', $new_theme);
    unset($GLOBALS['theme']);
    init_theme();
  }

  /**
   * Assign permissions to roles
   * Foreach entry in $roles, assign all entries in $permissions
   *
   * @param array $roles
   * @param array $permissions
   * @return array
   *  List of messages for each role | permission pair
   */
  function _add_permissions($roles, $permissions) {
    $ret = array();

    foreach ($roles as $rid) {
      if (is_numeric($rid)) {
        $role = db_fetch_array(db_query("SELECT rid, name FROM {role} WHERE rid=%d", $rid));
      }
      else {
        $role = db_fetch_array(db_query("SELECT rid, name FROM {role} WHERE name='%s'", $rid));
      }
      $role_permissions = explode(', ', db_result(db_query('SELECT perm FROM {permission} WHERE rid=%d', $role['rid'])));
      $role_permissions = array_unique(array_merge($role_permissions, $permissions));
      db_query('DELETE FROM {permission} WHERE rid = %d', $role['rid']);
      db_query("INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')", $role['rid'], implode(', ', $role_permissions));
      $ret[] = array('success' => TRUE, 'query' => "Added " . implode(', ', $permissions) . ' permissions for ' . $role['name']);
      $this->pass("Added " . implode(', ', $permissions) . ' permissions for ' . $role['name']);
    }

    return $ret;
  }

  /**
   * Remove permissions to roles
   * Foreach entry in $roles, remove all entries in $permissions
   *
   * @param array $roles
   * @param array $permissions
   * @return array
   *  List of messages for each role | permission pair
   */
  function _remove_permissions($roles, $permissions) {
    $ret = array();
    foreach ($roles as $rid) {
      if (is_numeric($rid)) {
        $role = db_fetch_array(db_query("SELECT rid, name FROM {role} WHERE rid=%d", $rid));
      }
      else {
        $role = db_fetch_array(db_query("SELECT rid, name FROM {role} WHERE name='%s'", $rid));
      }
      $role_permissions = explode(', ', db_result(db_query('SELECT perm FROM {permission} WHERE rid=%d', $role['rid'])));
      $role_permissions = array_diff($role_permissions, $permissions);
      db_query('DELETE FROM {permission} WHERE rid = %d', $role['rid']);
      db_query("INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')", $role['rid'], implode(', ', $role_permissions));
      $ret[] = array('success' => TRUE, 'query' => "Removed " . implode(', ', $permissions) . ' permissions for ' . $role['name']);
      $this->pass("Removed " . implode(', ', $permissions) . ' permissions for ' . $role['name']);
    }

    return $ret;
  }

  protected function drupalCreateUser($permissions = array('access comments', 'access content', 'post comments', 'post comments without approval'), $profile = array()) {
    if(!$permissions) {
      $permissions = array('access comments', 'access content', 'post comments', 'post comments without approval');
    }
    $user = parent::drupalCreateUser($permissions);
    $this->pass_raw[$user->uid] = $user->pass_raw;

    $profile += array(
      'profile_nickname' => $user->name,
      'profile_gender'   => t('Male'),
      'profile_country'  => 'FR',
      'profile_city'     => $this->randomName(),
      'files[picture_upload]' => drupal_get_path('module', 'os_poker'). '/avatar1.png',
    );
    
    $osp_user = CUserManager::instance()->User($user->uid);
    foreach($profile as $p => $v) {
      $osp_user->{$p} = $v;
      $user->{$p} = $v;
    }
    $osp_user->Save();
    return $user;
  }

  /**
   * Overload drupal login function
   */
  protected function drupalLogin(stdClass $user) {
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }
    $edit = array(
      'name' => $user->name,
      'pass' => $user->pass_raw ? $user->pass_raw : $this->pass_raw[$user->uid],
    );
    $this->drupalPost('user', $edit, t('Log in'));

    // If a "log out" link appears on the page, it is almost certainly because
    $pass = $this->assertNoField('name', t('User %name successfully logged in.', array('%name' => $user->name)), t('User login'));

    if ($pass) {
      $this->loggedInUser = $user;
    }
  }

  /*
   * Overload simpletest Logout function.
   */
  protected function drupalLogout() {
    $this->drupalGet('logout', array('query' => 'destination=user'));
    $pass = $this->assertField('name', t('Username field found.'), t('Logout'));
    $pass = $pass && $this->assertField('pass', t('Password field found.'), t('Logout'));

    if ($pass) {
      $this->loggedInUser = FALSE;
    }
  }

  /**
   * Create a test <em>poker</em> database, loading schema from
   * usr/share/poker-network/schema.sql. And set the CPoker class to use this
   * test database.
   * @return <string> The name of the test poker database.
   *
   */
  function createPokerDatabase() {
    if(!isset($this->POKER_DB)) {
      $this->POKER_DB = "pythonpokernetworktest";
      require_once(drupal_get_path('module', 'os_poker') . "/poker.class.php");
      shell_exec("mysqladmin -f -u root drop $this->POKER_DB");
      shell_exec("mysqladmin -u root create $this->POKER_DB");
      shell_exec("mysql -u root $this->POKER_DB < /usr/share/poker-network/schema.sql");
      global $db_url;
      if (is_string($db_url)) { $db_url = array('default' => $db_url); } // Thanks Bdragon
      $db_url[$this->POKER_DB] = "mysql://root@localhost/$this->POKER_DB";
      CPoker::ChangePokerDB($this->POKER_DB);
    }
    return $this->POKER_DB;
  }

  /**
   *
   * @param <string> $name The name of the table
   * @return <string> The technical id of the table.
   */
  function createPokerTable($name) {
    $previous_db = db_set_active($this->createPokerDatabase());
    $sql = "INSERT INTO `pokertables` VALUES (NULL,0,10,0,0,0,0,0,0,60,5,1,'%s','holdem','2-4-limit','default',0)";
    db_query($sql, $name);
		$id = db_last_insert_id("pokertables", "serial");
    db_set_active($previous_db);
		return $id;
  }

  /**
   * Sit a user (player) at the given table.
   *
   * @param <object> $user The use to sit a the table
   * @param <string> $game_id The technical id of the table.
   */
  function joinPokerTable($user, $game_id) {
    $previous_db = db_set_active($this->createPokerDatabase());
    $sql = "INSERT INTO user2table VALUES (%d, %d, 0, 0)";
    db_query($sql, $user->uid, $game_id);
    db_set_active($previous_db);

    $tables  = CUserManager::instance()->User($user->uid)->Tables();
    foreach($tables as $k => $table) {
      $tables[$k] = $table->serial;
    }
    $this->assertTrue(in_array($game_id, $tables), t('Player %name is sitting at table %game_id according to %function', array('%name' => $user->uid, '%game_id' => $game_id, '%function' => 'CUser::Tables')));
    $users_at_table = CPoker::UsersAtTable($game_id);
    $this->assertTrue(in_array($user->uid, $users_at_table), t('Player %name is sitting at table %game_id according to %function', array('%name' => $user->uid, '%game_id' => $game_id, '%function' => 'CPoker::UsersAtTable')));
 }

 function print_r($var) {
   $this->pass('<pre>'. print_r($var, true) .'</pre>');
 }
}
