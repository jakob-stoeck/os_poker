<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


/**
 * @file
 * Poker 5.2: Ranking System
 *
 */

/**
 * Includes the custom test case class with basic site configuration.
 */
require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

/**
 * Spec: 5.2: Ranking System test case
 *
 * Verifies whatever workflow is working according to specifications.
 * Validates this and that.
 *
 * @assert: this little step.
 * @assert: other little step.
 *
 */
class OSPokerRankingSystem extends OsPokerWebTestCase {

  /**
   * @var user object created and logged in during setUp process.
   */
  protected $skel_user;

  /**
   * Implementation of hook_info().
   */
  public static function getInfo() {
    return array(
      'name'        => '5.2 Ranking System',
      'description' => 'Ranking system tests',
      'group'       => 'OS Poker Specifications',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Enable required modules and set default site configuration.
    parent::setUp();

    /**
     * Register an 'skel_user' account and complete its profile.
     * This user has 'skel_user' for nickname.
     */
    $this->skel_user = $this->drupalCreateUser();
    // Login the user, complete profile form
    $this->OsPokerLogin($this->skel_user, array('profile_nickname' => 'skel_user'));

  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  /**
   * Verify this
   *
   * The verification is done through these steps:
login skel_user
create a buddy with invitation process
do it n times (let's say 5)
iterate through skel_user buddies and add them a random amount of Chips
call usort on buddies list and verify the order
   *
   */
  function testRankingSystem()
  {

    for ($i = 0; $i < 5; $i++)
    {
     $this->drupalLogin($this->skel_user);

		$name = $this->randomName();
		$email = $email = $this->randomName() . '@' . $this->randomName() . ".com";
		$this->OsPokerSendInvites(array($name => $email));
     $this->drupalLogout();

		$mail_queue = end($this->drupalGetMails());
		$code = $mail_queue['params']['invite']->code;
		$this->drupalGet('invite/accept/'. $code);
		$password = $this->randomName();
		$options = array(
		  'name'        => $name,
		  'pass[pass1]' => $password,
		  'pass[pass2]' => $password,
		);
		$this->drupalPost($this->getUrl(), $options, t('Create new account'));
		$this->OsPokerProfileSubmit(array('profile_nickname' => $name));
     $this->drupalLogout();

    }

	$test_user = CUserManager::instance()->User($this->skel_user->uid);
	$test_buddies = $test_user->Buddies(TRUE);

	$previous_max_chips = 0;
	foreach ($test_buddies as $buddy)
	{
		$buddy->chips += rand(1000, 5000);
		$buddy->Save();
		if ($buddy->Chips() > $previous_max_chips)
		   $previous_max_chips = $buddy->Chips();
	}

	$test_buddies = $test_user->Buddies(TRUE, TRUE);
	
	foreach ($test_buddies as $buddy)
	{
		$this->assertTrue($buddy->Chips() <= $previous_max_chips, "Sort OK : ".$buddy->Chips());
		$previous_max_chips = $buddy->Chips();
	}


	drupalGet("poker/profile/ranking");
	$this->assertTrue(TRUE, drupalGetContent());
  }



}
