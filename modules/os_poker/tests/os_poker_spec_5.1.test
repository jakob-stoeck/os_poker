<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

class OSPokerSpecificationsBooking extends OsPokerWebTestCase {

	protected $skel_user;

	public static function getInfo() {
		return array(
		'name'        => '5.1 Booking Chips',
		'description' => 'Booking Chips according to no.  of Invited Friends',
		'group'       => 'OS Poker Specifications',
		);
	}

	function setUp() {
		parent::setUp();
		$this->skel_user = $this->drupalCreateUser();
		$this->OsPokerLogin($this->skel_user, array('profile_nickname' => 'skel_user'));

	}

	function tearDown() {
		parent::tearDown();
	}

	
	function testBookingChips()
	{
		//Check task
		$rawtask = CScheduler::GetRawUserTasks($this->skel_user->uid);
		
		// There must be also a CDelayMessage for redirection on login
		$this->assertTrue(count($rawtask["login"]) > 0 &&
		count($rawtask["live"]) == 1,
		t("After profile submission a task is registered for login and live events"));
		
		$is_daily_chips = FALSE;
		foreach ($rawtask["login"] as $msg)
		{
			if ($msg->type == "CDailyChips")
			{
				$is_daily_chips = TRUE;
				$t1 = $msg;
				break;
			}
		}

		$t2 = array_pop($rawtask["live"]);
		
		$this->assertTrue($t1->id_task == $t2->id_task && $t1->type == 'CDailyChips',
		"Task's type is CDailyChips");
		$tstamp = strtotime($t1->moment);
		$this->assertTrue(($tstamp - time()) > 86390, "Task will run in ~ 24h");
		
		//Run task
		$rawtask = CScheduler::GetRawUserTasks($this->skel_user->uid);
		$su = CUserManager::instance()->User($this->skel_user->uid);
		
		$chips = $su->Chips();
		
		CScheduler::TriggerHelper("login", $su, $rawtask);
		
		$newchips = $su->Chips();
		
		$this->assertTrue($newchips > $chips,
											t("Once a day every registered player receives a pre-defined number of chips when logging in (1)", array("!before" => $chips, "!after" => $newchips)),
											'SpecPoker');
		
		$rawtask = CScheduler::GetRawUserTasks($this->skel_user->uid);
		
		$this->assertTrue(count($rawtask["login"]) == 1 &&
											count($rawtask["live"]) > 0,
											t("After CDailyChips running a task is registered for login and live events"));
		
		$t3 = array_pop($rawtask["login"]);
		$this->assertTrue($t1->id_task != $t3->id_task && $t3->type == 'CDailyChips',
											"Task's is a new CDailyChips that will give the user new chips in 24h");
		
		$tstamp = strtotime($t3->moment);
		$this->assertTrue(($tstamp - time()) > 86399,
											"Once a day every registered player receives a pre-defined number of chips when logging in (2)",
											'SpecPoker');
	}

	function testBookingDailyChipsOnlyOnceADay() {
		// login once => more chips, logout, login again => same chips
		$test_user = CUserManager::instance()->User($this->skel_user->uid, TRUE);
		$chips_amount = $test_user->Chips();

		//Trigger user tasks
		$tasks = CScheduler::GetRawUserTasks($this->skel_user->uid);
		$runtasks = CScheduler::TriggerHelper("live", $test_user, $tasks);
		
		//Refresh user
		$test_user = CUserManager::instance()->User($this->skel_user->uid, TRUE);

		//Create an immediate daily chips task
		CScheduler::instance()->RegisterTask(new CDailyChips(), $this->skel_user->uid, array('login', "live"), "-1 Day");
		$test_user = CUserManager::instance()->User($this->skel_user->uid, TRUE);

		$this->assertTrue($test_user->Chips() == $chips_amount + 500, $chips_amount." + 500 == ".$test_user->Chips()."User gets his daily chips allocation at first login");
		$chips_amount = $test_user->Chips();

		// flush task, logout then login same user and verify chips amount is unchanged
		CScheduler::TaskFlush(new CDailyChips(), $this->skel_user->uid);
		$this->drupalLogout();
		$this->drupalLogin($this->skel_user);

		$test_user = CUserManager::instance()->User($this->skel_user->uid, TRUE);

		$this->assertTrue($test_user->Chips() == $chips_amount, 'It must be ensured that bonus chips are credited only once a day', 'SpecPoker');


	}

	/*
	 * WARNING : this test is sensitive to the environment. If getting buddies 
	 * generates more chips in addition to the chips granted because of the daily
	 * chip allocation, the tests may become false for no reason.
	 */
	function testInvitations()
	{
		require_once(drupal_get_path('module', 'os_poker') . "/poker.class.php");

		if (function_exists('set_time_limit'))
		{
			//script execution time fixed to 10mn
			@set_time_limit(600);
		}
		
		$this->skel_user = $this->drupalCreateUser();
		// Login the user, complete profile form
		$this->OsPokerLogin($this->skel_user, array('profile_nickname' => 'skel_user2'));

		$book_chips = false;
		
		//Create user and ensure that a daily chips task is created
		$test_user = CUserManager::instance()->User($this->skel_user->uid, TRUE);
		//First allocation must be 3000 chips (complete profile)
		
		CUserManager::instance()->DebugForceCurrentUser($test_user->uid);

		for ($i = 0; $i < 58; $i++)
		{

			$previous_chips = $test_user->Chips();
			$this->pass("<b style='color:blue;'>User chips at iteration {$i} : " . $test_user->Chips() . "</b>");
			
			//Login to the site
			$this->drupalLogin($this->skel_user);

			//Send invitation
			$name = $this->randomName();
			$email = $email = $this->randomName() . '@' . $this->randomName() . ".com";
			$this->OsPokerSendInvites(array($name => $email));
			
			//Logout
			$this->drupalLogout();

			//Accept invitation
			$mail_queue = end($this->drupalGetMails());
			$code = $mail_queue['params']['invite']->code;
			$this->drupalGet('invite/accept/'. $code);
			$password = $this->randomName();
			$options = array(
			'name'        => $name,
			'pass[pass1]' => $password,
			'pass[pass2]' => $password,
			);
			$this->drupalPost($this->getUrl(), $options, t('Create new account'));
			$this->OsPokerProfileSubmit(array('profile_nickname' => $name));

			//Logout
			$this->drupalLogout();
			
			//Trigger user tasks
			$tasks = CScheduler::GetRawUserTasks($this->skel_user->uid);
			$runtasks = CScheduler::TriggerHelper("live", $test_user, $tasks);
			
			//Refresh user
			$test_user = CUserManager::instance()->User($this->skel_user->uid, TRUE);
			CScheduler::TaskFlush(new CDailyChips(), $this->skel_user->uid);
			
			//Create an immediate daily chips task
			CScheduler::instance()->RegisterTask(new CDailyChips(), $this->skel_user->uid, array('login', "live"), "-1 Day");


			/*
			 **	Check chip allocations (take rewards bonus into account)
			 */
			
			$this->assertTrue(TRUE, "<b style='color:red;'>User chips at iteration {$i} : " . $test_user->Chips() . "</b>");
			

			$this->drupalLogin($this->skel_user);

			$this->pass('The number of credits must be related to the number of buddies', 'SpecPoker');

			switch ($i)
			{

			case 1: //500 < 5
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 500, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +500",
														 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->pass('It must be visible on the invite friend page how many chips the user gets for login at the moment and how many friends more he needs to reach the next grade (e.g.a new grade is reached when you have 10 successful invitations.', 'SpecPoker');
					$this->assertRaw('<p class="Dollar2">500</p>', "Currently get $500", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">750</p>', "Next step to $750", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}
				
			case 6:  //750 >= 5
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 750, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +750", 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">750</p>', "Currently get $750", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">1000</p>', "Next step to $1000", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}

			case 11:  //1000 >= 10
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 1000, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +1000", 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">1000</p>', "Currently get $1000", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">1500</p>', "Next step to $1500", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}

			case 16:  //1500 >= 15
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 1500, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +1500", 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">1500</p>', "Currently get $1500", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">2000</p>', "Next step to $2000", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}

			case 21:  //2000 >= 20
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 2000, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +2000", 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">2000</p>', "Currently get $2000", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">2500</p>', "Next step to $2500", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}

			case 26:  //2500 >= 25
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 2500, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +2500", 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">2500</p>', "Currently get $2500", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">3000</p>', "Next step to $3000", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}

			case 31:  //3000 >= 30
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 3000, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => 3000", 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">3000</p>', "Currently get $3000", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">3500</p>', "Next step to $3500", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}

			case 36:  //3500 >= 35
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 3500, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +3500", 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">3500</p>', "Currently get $3500", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">4000</p>', "Next step to $4000", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}

			case 41:  //4000 >= 40
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 4000, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +4000", 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">4000</p>', "Currently get $4000", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">4500</p>', "Next step to $4500", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}

			case 46:  //4500 >= 45
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 4500, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +4500", 'SpecPoker');
					
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">4500</p>', "Currently get $4500", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Dollar3">5000</p>', "Next step to $5000", 'SpecPoker');
					//Check next step chips
					$this->assertRaw('<p class="Buddies">3</p>', "3 more to jump to next step", 'SpecPoker');
					break;
				}

			case 56:  //5000 >= 50
				{
					$this->assertEqual($test_user->Chips(), $previous_chips + 5000, "AFTER $i INVITES => CHIPS amount ".$test_user->Chips()." (previous : $previous_chips) => +5000", 'SpecPoker');
					//check the current and next step
					$this->drupalGet('poker/buddies/invite');
					//Check current chips
					$this->assertRaw('<p class="Dollar2">5000</p>', "Currently get $5000", 'SpecPoker');
					//Check next step chips
					//$this->assertRaw('<p class="Dollar3">0</p>', "Next step to $0 (Undefined case)");
					$this->fail('SPECIFICATIONS FAILURE: The specifications do not explain what should happen for people with more than 50 budies',
											'SpecPoker');
					//Check next step chips
					//$this->assertRaw('<p class="Buddies">0</p>', "0 more to jump to next step");
					break;
				}


			default:
				break;

			}
			
			$this->drupalLogout();

		}

	}



}
