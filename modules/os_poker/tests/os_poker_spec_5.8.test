<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


/**
 * @file
 * Poker 5.8: 
 *
 */

/**
 * Includes the custom test case class with basic site configuration.
 */
require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

/**
 * Spec: 5.8: Player Challenges and Table Invitations test case
 *
 * Verifies whatever workflow is working according to specifications.
 * Validates this and that.
 *
 * @assert: this little step.
 * @assert: other little step.
 *
 */
class OSPokerPlayerChallengeTableInvitations extends OsPokerWebTestCase {

  /**
   * @var user object created and logged in during setUp process.
   */
  protected $skel_user;

  /**
   * Implementation of hook_info().
   */
  public static function getInfo() {
    return array(
      'name'        => '5.8 Player Challenge / Table Invitations',
      'description' => 'Status/Level Evaluation tests',
      'group'       => 'OS Poker Specifications',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Enable required modules and set default site configuration.
    parent::setUp();

    /**
     * Register an 'skel_user' account and complete its profile.
     * This user has 'skel_user' for nickname.
     */
    $this->skel_user = $this->drupalCreateUser();
    // Login the user, complete profile form
    $this->OsPokerLogin($this->skel_user, array('profile_nickname' => 'skel_user'));

  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }


  /**
   *
   */
  function testInviteUser() {
    CUserManager::instance()->DebugForceCurrentUser($skel_user->uid);

    require_once(drupal_get_path('module', 'os_poker') . "/scheduler.class.php");
    require_once(drupal_get_path('module', 'os_poker') . "/os_poker_messages.php");
	
    //Go to message box and check there is no message
    $this->drupalGet('poker/messagebox');
	
    $this->assertText(
         t("You don't have any message."),
         t('New users doesn\'t have message')
      );

    $user = $this->drupalCreateUser();

    //send a message to a user
    $this->drupalGet('poker/messages/send', array('query' => array('type' => 'os_poker_invite_user', 'target' =>  $user->uid)));

    $this->OsPokerLogin($user);

    //Go to message box and check there is a message
    $this->drupalGet('poker/messagebox');
    $this->assertText(
         "is playing at table",
         t('Found text in message : [Player] "is playing at table" [table] come and join')
      );

    //$this->assertTrue(preg_match("/poker\/shop/", $this->getUrl()) > 0, "Optional link in messages");

    CUserManager::instance()->DebugRestoreCurrentUser();
  }




  function testChallengeUser() {
    CUserManager::instance()->DebugForceCurrentUser($skel_user->uid);

    require_once(drupal_get_path('module', 'os_poker') . "/scheduler.class.php");
    require_once(drupal_get_path('module', 'os_poker') . "/os_poker_messages.php");
	
    //Go to message box and check there is no message
    $this->drupalGet('poker/messagebox');
	
    $this->assertText(
         t("You don't have any message."),
         t('New users doesn\'t have message')
      );

    $user = $this->OsPokerCreateUserWithProfile();
    $user = user_load($user->uid);
    $this->drupalGet('poker/messages/send', array('query' => array('type' => 'os_poker_challenge_user', 'challengetarget' =>  $user->uid)));

    $this->drupalGet('poker/messages/receive');
        $this->assertText(json_encode(array(
        'type' => 'os_poker_imsg',
        'body' => array(
          'text' => t("You just challenged !user", array("!user" => $user->profile_nickname)),
          'title' => t('Challenge'),
        )
      )), t('Ingame notification for challenge request found.'));

    $this->drupalLogout();
    $this->drupalLogin($user);

    //Go to message box and check there is a message
    $this->drupalGet('poker/messagebox');
    $this->assertText(
         "You just receive a headsup challenge from",
         t('Found text : "You just receive a headsup challenge from" [Player]')
      );

    /* TODO : add check for accapt/refuse link when actions will be implemented */
    //$this->assertTrue(preg_match("/poker\/shop/", $this->getUrl()) > 0, "Optional link in messages");

    CUserManager::instance()->DebugRestoreCurrentUser();
  }




}
