<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

class OSPokerWhoIsOnline extends OsPokerWebTestCase {

  /*
   * The Buddy List page size
   */
  const PAGE_SIZE = 7;

  public static function getInfo() {
    return array(
      'name'        => '5.3 Buddylist and "who is online"',
      'description' => 'Buddylist and "who is online" functionality',
      'group'       => 'OS Poker Specifications',
    );
  }

  private function assertBuddyListOnPage($path) {
    $this->drupalGet($path);
    return $this->assertRaw('id="buddylist"', t('Buddy list found on page %path', array('%path' => $path)));
  }

  function setUp() {
    parent::setUp();

    $this->main_user = $this->drupalCreateUser();
    $this->OsPokerLogin($this->main_user, array('profile_nickname' => 'main_user'));
    $this->buddies = array();
    for ($i = 0; $i < 10; $i++) {
      $buddy = $this->buddies[] = $this->OsPokerCreateUserWithProfile();
      $this->OsPokerCreateBuddyRelationShip($this->main_user, $buddy);
    }
    $this->lonely_user =  $this->OsPokerCreateUserWithProfile();
  }

  function tearDown() {
    parent::tearDown();
  }

  /**
   * - go to front page
   * - verify that the name of each buddy of the current user is shown in one of
   *   the page (paging is done
   */
  function testBuddylist(){
    $all_buddies_found = $this->assertBuddyListOnPage('<front>');
    $buddies_count = count($this->buddies);
    for($i = 0; $i < $buddies_count; $i++) {
      $name = $this->buddies[$i]->name;
      $all_buddies_found = $all_buddies_found & $this->assertText($name, t('Buddy %name is in the buddy list', array('%name' => $name)));
    }
    $this->assertTrue(
      $all_buddies_found,
      t('users who have an established buddy relationship to another user will be shown in the buddy list'),
      'SpecPoker'
    );
  }


  /**
   * Verify that there is a possibility to filter the list by online/offline.
   *
   * The verification is done through these steps:
   * - go on front page
   * - verify the buddy list is on the page
   * - verify that the filtering checkbox (named online) is on the page
   *
   */
  function testBuddyListStatusfilter(){
    $this->assertBuddyListOnPage('<front>');
    $this->assertFieldByName('online', '', 'the online field is present, it is a hint that the filter may be present.');
		$this->pass('REFER TO JavaScript TESTS: There is a possibility to filter the list by online/offline', 'SpecPoker');
  }


  /**
   * Verify that the buddy list is shown on all pages.
   
   * Since there is no no way to visit each and every page, check known pages.
   * 
   * The verification is done through these steps:
   *  - For each known page
   *   - Go to the page
   *   - verifiy that the buddylist is on the page
   */

  function testBudyListOnAllPages() {
    $paths = array(
									 '<front>',
									 'node/6',
									 'node/7'
									 // more static pages to this list
									 );
    $all_pass = true;
    foreach($paths as $path) {
      $all_pass = $all_pass & $this->assertBuddyListOnPage($path);
    }
    $this->assertTrue($all_pass, 'footer of every complete page when logged in', 'SpecPoker');
	}
  

  function testBuddyListSortedByRanking() {
		// this test is mostly written somewhere else for when the buddies show in another
		// context: the test can be shared and here we only need to check that it actually
		// shows sorted.
		/* cmirey : in 5.2 TestRankingSystem(), simplified version here */

		$test_user = CUserManager::instance()->User($this->main_user->uid);
		$test_buddies = $test_user->Buddies(TRUE);

		foreach ($test_buddies as $buddy)
			{
				$buddy->chips += rand(1000, 5000);
				$buddy->Save();
			}

		$test_buddies = $test_user->Buddies(TRUE, TRUE);

		$this->main_user->name = $this->main_user->mail; 
		$this->drupalLogin($this->main_user);

		$buddylist_content = $this->drupalGet("<front>");

		/* build a simple regexp to ensure buddies chips are displayed in right order (descendant by chips amount) in buddylist view */
		$regexp = "";
		$i = 1; // first index appearing in buddylist
		foreach ($test_buddies as $buddy)
			{
				$regexp = $regexp.".+?\\".$buddy->Chips(TRUE);
				$this->assertTrue(preg_match("/".$regexp."/siU", $buddylist_content) > 0, "intermediate ranking regexp with ".$i." / ".$buddy->Chips(TRUE)."=> ".$regexp);
				$i++;
			}
		$regexp = $regexp.".+?";

		$this->assertTrue(preg_match("/".$regexp."/siU", $buddylist_content) > 0, 'shown by the ranking criterion (default is most chips) in descending order', 'SpecPoker');

  }

  /**
   * - login as the lonely user
   * - for $i = 0..self::PAGE_SIZE
   *  - go on front page
   *  - verify the buddy list is on the page
   *  - verify that there is (self::PAGE_SIZE - $i) “Invite friends”
   *    placeholders on the page
   *  - make $this->buddies[$i] as buddy of the lonely user
   */
  function testBuddyListPlaceHolders() {
    $this->drupalLogin($this->lonely_user);
    $all_pass = TRUE;
    $i = 0;
    while($i <= self::PAGE_SIZE) {
      $count = self::PAGE_SIZE - $i;
      $this->assertBuddyListOnPage('<front>');
      $pattern = '/(Invite Friends[\s\S]+?){'.$count.'}/i';
      $this->pass($pattern);
      if($count) {
        $this->assertTrue(TRUE, "preg_match result : ".preg_match_all($pattern, $this->drupalGetContent(), $out));
        $all_pass = $all_pass & $this->assertPattern($pattern, t('Found !count "Invite friends" placeholder(s).', array('!count' => $count)));
        $this->OsPokerCreateBuddyRelationShip($this->lonely_user, $this->buddies[$i]);
      }
      else {
        $all_pass = $all_pass & $this->assertNoText('Invite Friends', t('No more "Invite friends" placeholder(s).', array('!count' => $count)));
      }
      $i++;
    }
    $this->assertTrue($all_pass, 'If the user has not enough buddies to fill the list, the Invite friend placeholder is shown instead', 'SpecPoker');
  }

  function testBuddyChallengeNoLinkWhenOffine() {
    $this->drupalLogin($this->lonely_user);
    $all_pass = TRUE;
    $i = 0;
		$this->OsPokerCreateBuddyRelationShip($this->lonely_user, $this->buddies[$i]);

		$this->drupalGet("<front>");
		$this->assertRaw("<span class='nolink'>Challenge", 'Not a link if user is offline.', 'SpecPoker');
  }


	function testFail() {
/* #238
		$this->fail('click invoke the challenge functionality. Opens a confirmation thickbox with Challenge sent to nick.', 'SpecPoker');
		$this->fail('Join Table:  invokes the invite to table functionality', 'SpecPoker');
		$this->fail('invokes the invite to table functionality. Invite if offline', 'SpecPoker');
*/
	}
}
