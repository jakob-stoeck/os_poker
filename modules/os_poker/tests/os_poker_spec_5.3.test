<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


/**
 * @file
 * Poker 5.3 Buddylist and "who is online" functionality
 *
 */

/**
 * Includes the custom test case class with basic site configuration.
 */
require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

/**
 * Spec: 5.3: Buddylist and "who is online" test case
 *
 * Verifies whatever workflow is working according to specifications.
 * Validates this and that.
 *
 * @assert: The buddy list is shown on all pages.
 * @assert: Users who have an established relationship with current user are
 *          shown in the buddy list.
 * @assert: There is a possibility to filter the list by online/offline[S].
 *          This status is shown for every user in the list.
 * @assert: Buddies in the list are shown by the ranking criterion (default is
 *          most chips in descending order).
 * @assert: If the user has not enough buddies to fill the list, the
 *          “Invite friend” placeholder is shown instead.
 *
 *@TODO: Add more known pages in testBudyListOnAllPages
 *@TODO: testBuddyListSortedByRanking is not implemented yet
 *@TODO: testBuddyPlaceHolders
 *
 */
class OSPokerWhoIsOnline extends OsPokerWebTestCase {

  /*
   * The Buddy List page size
   */
  const PAGE_SIZE = 7;

  /**
   * Implementation of hook_info().
   */
  public static function getInfo() {
    return array(
      'name'        => '5.3 Buddylist and "who is online"',
      'description' => 'Buddylist and "who is online" functionality tests',
      'group'       => 'OS Poker Specifications',
    );
  }

    /**
   * Assert that the Buddy List is shown on a page.
   *
   * Expect the Buddy List to be in a html element with id="buddylist".
   *
   * @param $path The page to check the for the Buddy List.
   */
  private function assertBuddyListOnPage($path) {
    $this->drupalGet($path);
    return $this->assertRaw('id="buddylist"', t('Buddy list found on page %path', array('%path' => $path)));
  }

  /**
   * Implementation of setUp().
   *
   * - Create a main user (in $this->main_user)
   * - Create 10 users as buddies of the main user (in this->buddies)
   * - Create a user with no buddy (in $this->lonely_user);
   * - Log as the main user
   */
  function setUp() {
    // Enable required modules and set default site configuration.
    parent::setUp();

    //Create users
    $this->main_user = $this->drupalCreateUser();
    $this->OsPokerLogin($this->main_user, array('profile_nickname' => 'main_user'));
    $this->buddies = array();
    for ($i = 0; $i < 10; $i++) {
      $buddy = $this->buddies[] = $this->OsPokerCreateUserWithProfile();
      //Create a buddy-reliationship with main user
      $this->OsPokerCreateBuddyRelationShip($this->main_user, $buddy);
    }
    $this->lonely_user =  $this->OsPokerCreateUserWithProfile();
  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  /**
   * Verify that users who have an established relationship with current user
   * are shown in the buddy list.
   *
   * The verification is done through these steps:
   * - go to front page
   * - verify that the name of each buddy of the current user is shown in one of
   *   the page (paging is done
   */
  function testBuddylist(){
    $all_buddies_found = $this->assertBuddyListOnPage('<front>');
    $buddies_count = count($this->buddies);
    for($i = 0; $i < $buddies_count; $i++) {
      $name = $this->buddies[$i]->name;
      $all_buddies_found = $all_buddies_found & $this->assertText($name, t('Buddy %name is in the buddy list', array('%name' => $name)));
    }
    $this->assertTrue(
      $all_buddies_found,
      t('Users who have an established relationship with current user are shown in the buddy list.'),
      'Specs'
    );
  }


  /**
   * Verify that there is a possibility to filter the list by online/offline.
   *
   * The verification is done through these steps:
   * - go on front page
   * - verify the buddy list is on the page
   * - verify that the filtering checkbox (named online) is on the page
   *
   * @note Filtering is done client-side in JavaScript. SimpleTest does not
   *       support testing JS behavior.
   *
   */
  function testBuddyListStatusfilter(){
    $this->assertBuddyListOnPage('<front>');
    $this->assertFieldByName('online', '', 'There is a possibility to filter the list by online/offline.');
  }


  /**
   * Verify that the buddy list is shown on all pages.
   
   * Since there is no no way to visit each and every page, check known pages.
   * 
   * The verification is done through these steps:
   *  - For each known page
   *   - Go to the page
   *   - verifiy that the buddylist is on the page
   */
/* 
** cmirey : don't understand this useless test, if it has to be done on known page,
** then the only known page that is complete is the <front> one...
** Other pages are static content (Terms of services, Editorial,...) or core drupal (user...)
**
**  function testBudyListOnAllPages() {
**    //
**    $paths = array(
**      '<front>',
**      'user',
**    );
**    $all_pass = true;
**    foreach($paths as $path) {
**      $all_pass = $all_pass & $this->assertBuddyListOnPage($path);
**    }
**    $this->assertTrue($all_pass, 'The buddy list is shown on all pages.', 'Specs.');
**  }
*/
  

  /*
   * Verify that buddies in the list are shown by the ranking criterion (default
   * is most chips in descending order).
   *
   *
   * The verification is done through these steps:
   * - set buddies stats to a known states
   * - go on front page
   * - verify the buddy list is on the page
   * - verify that buddies are sorted by chips in descending order
   * - clikc the 'change order' link/button
   * - verify that buddies are sorted by chips in ascending order
   * - for other each criteria
   *   - click the 'sort by criteria'
   *   - verify that buddies are sorted by the criteria in descending order
   *   - clikc the 'change order' link/button
   *   - verify that buddies are sorted by the criteria in ascending order
   */
/* cmirey : we'll see that later
**  function testBuddyListSortedByRanking() {
**    $this->assertBuddyListOnPage('<front>');
**    $this->fail('TODO: Buddies in the list are shown by the ranking criterion', 'Specs.');
**  }
*/

  /**
   * Verify that if the user has not enough buddies to fill the list, the
   * "Invite friend" placeholder is shown instead.
   *
   * The verification is done through these steps:
   * - login as the lonely user
   * - for $i = 0..self::PAGE_SIZE
   *  - go on front page
   *  - verify the buddy list is on the page
   *  - verify that there is (self::PAGE_SIZE - $i) “Invite friends”
   *    placeholders on the page
   *  - make $this->buddies[$i] as buddy of the lonely user
   */
  function testBuddyListPlaceHolders() {
    $this->drupalLogin($this->lonely_user);
    $all_pass = TRUE;
    $i = 0;
    while($i <= self::PAGE_SIZE) {
      $count = self::PAGE_SIZE - $i;
      $this->assertBuddyListOnPage('<front>');
//      $this->assertTrue(TRUE, $this->drupalGetContent());
      $pattern = '/(Invite Friends[\s\S]+?){'.$count.'}/i';
      $this->pass($pattern);
      if($count) {
        $this->assertTrue(TRUE, "preg_match result : ".preg_match_all($pattern, $this->drupalGetContent(), $out));
        $all_pass = $all_pass & $this->assertPattern($pattern, t('Found !count "Invite friends" placeholder(s).', array('!count' => $count)));
        $this->OsPokerCreateBuddyRelationShip($this->lonely_user, $this->buddies[$i]);
      }
      else {
        $all_pass = $all_pass & $this->assertNoText('Invite Friends', t('No more "Invite friends" placeholder(s).', array('!count' => $count)));
      }
      $i++;
    }
    $this->assertTrue($all_pass, 'If the user has not enough buddies to fill the list, the "Invite friends" placeholder is shown instead.', 'Specs.');
  }
}
