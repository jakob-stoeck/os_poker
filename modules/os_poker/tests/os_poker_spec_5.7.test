<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


/**
 * @file
 * Poker 5.7 specification test case: Notification system
 *
 */

/**
 * Includes the custom test case class with basic site configuration.
 */
require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

/**
 * Spec: 5.7: Workflow Notification system test case
 *
 * Verifies message notifications is working according to specifications.
 *
 * @assert: Register a user
 * @assert: Go to message box and check there is no message
 * @assert: Logout
 * @assert: Register an other user
 * @assert: Send a message to the first user
 * @assert: Logout
 * @assert: Log in with the first user
 * @assert: Go to message box and check there is one message
 *
 */
class OSPokerSpecificationsNotifications extends OsPokerWebTestCase {

  /**
   * @var user object created and logged in during setUp process.
   */
  protected $skel_user;

  /**
   * Implementation of hook_info().
   */
  public static function getInfo() {
    return array(
      'name'        => '5.7: Workflow Notification System',
      'description' => 'Notification system functionalities tests',
      'group'       => 'OS Poker Specifications',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Enable required modules and set default site configuration.
    parent::setUp();

    /**
     * Register an 'skel_user' account and complete its profile.
     * This user has 'skel_user' for nickname.
     */
    $this->skel_user = $this->drupalCreateUser();
    // Login the user, complete profile form
    $this->OsPokerLogin($this->skel_user, array('profile_nickname' => 'skel_user'));

  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

	/**
	 * Verify that the tourney start notification is transmitted to the client.
	 *
	 * Create 3 users, and a tourney
	 * Register the users to the tourney
	 * Simulate a TOURNEY_START event from pokersocial
	 * Verify that the users received a notification.
	 */
	function testTourneyStartNotify() {
    require_once(drupal_get_path('module', 'os_poker') . "/scheduler.class.php");
		require_once(drupal_get_path('module', 'os_poker') . "/poker.class.php");
		require_once(drupal_get_path('module', 'os_poker') . "/os_poker_messages.php");

		$player1 = $this->drupalCreateUser(NULL, array('profile_nickname' => 'tourney_user1'));
		$player2 = $this->drupalCreateUser(NULL, array('profile_nickname' => 'tourney_user2'));
		$player3 = $this->drupalCreateUser(NULL, array('profile_nickname' => 'tourney_user3'));
		$this->drupalLogout();
			
		$oldDb = CPoker::ChangePokerDB($this->createPokerDatabase());
		$tourney = $this->createPokerTourney();

		$info1 = $this->pokerTourneyRegister($tourney->serial, $player1->uid, 1);
		$info2 = $this->pokerTourneyRegister($tourney->serial, $player2->uid, 2);
		$info3 = $this->pokerTourneyRegister($tourney->serial, $player3->uid, 3);

		// Simulate the pokersocial event TOURNEY_START
		$_GET['type'] = 'TOURNEY_START';
		$_GET['args'] = "[{$tourney->serial},0,0]";

		ob_start();
		$ret = os_poker_process_message();
		ob_end_clean();

		unset($_GET["type"]);
		unset($_GET["args"]);

		CPoker::ChangePokerDB($oldDb);
		
		// Verify that the live events were generated
		$this->drupalLogin($player1);

    $html = $this->drupalGet('poker/messages/receive');
    //Test for ingame notifcation.
    $this->assertText(json_encode(array(
      'type' => 'os_poker_tourney_start',
      'body' => array(
					'tourney_id' => $tourney->serial,
					'tourney_name' => $tourney->description_short,
					'table_id'     => $info1->table_serial,
					)
																			)), t('Tourney start notification for player1 found.'));

		$this->drupalLogin($player2);
    $html = $this->drupalGet('poker/messages/receive');
    //Test for ingame notifcation.
    $this->assertText(json_encode(array(
      'type' => 'os_poker_tourney_start',
      'body' => array(
					'tourney_id' => $tourney->serial,
					'tourney_name' => $tourney->description_short,
					'table_id'     => $info2->table_serial,
					)
																			)), t('Tourney start notification for player2 found.'));

		$this->drupalLogin($player3);
    $html = $this->drupalGet('poker/messages/receive');
    //Test for ingame notifcation.
    $this->assertText(json_encode(array(
      'type' => 'os_poker_tourney_start',
      'body' => array(
					'tourney_id' => $tourney->serial,
					'tourney_name' => $tourney->description_short,
					'table_id'     => $info3->table_serial,
					)
																			)), t('Tourney start notification for player3 found.'));
		
	}


  /**
   * Verify Messages
   *
   * The verification is done through these steps:
   * - send a message to a user
   * - verify that the spooler contains 1 message
   *
   */
  function testMessages(){
	require_once(drupal_get_path('module', 'os_poker') . "/scheduler.class.php");

	/**
     * Go to message box and check there is no message
     */
	$this->drupalGet('poker/messagebox');

	$this->assertText(
       t("You don't have any message."),
       t('New users doesn\'t have message')
    );

    /**
     * send a message to a user
     */
	$args["symbol"] = 'item';
	$args["text"] = "Hello this is a message";
	$args["links"] = l("Optional Link", "poker/shop/shop/1/buddy/" . $this->skel_user->uid);

	CMessageSpool::instance()->SendMessage($this->skel_user->uid, $args);

	/**
     * Go to message box and check there is a message
     */
	$this->drupalGet('poker/messagebox');

	$this->assertText(
       $args["text"],
       t('A message has been received')
    );

	//Check optional link in message
	$this->ClickLink('Optional Link');

	$this->assertTrue(preg_match("/poker\/shop/", $this->getUrl()) > 0, "Optional link in messages");

  }


  /**
   * Verify Message on Reward
   *
   * The verification is done through these steps:
   * - Give a reward to the user
   * - verify that the spooler contains 1 message
   *
   */

  function testMessageAndNotificationOnReward() {
    require_once(drupal_get_path('module', 'os_poker') . "/scheduler.class.php");

     $player = CUserManager::instance()->User($this->skel_user->uid);

      $rew = $player->Rewards();

      CPoker::GiveReward("reward1", $player, $rew);

      /*
       * Go to message box and check there is a message
       */
    $this->drupalGet('poker/messagebox');

    $this->assertText(
         "You just won reward " . $rew["reward1"]["name"],
         t('Reward message received')
      );

    $this->drupalGet('poker/messages/receive');
    $this->assertRaw(json_encode(array(
      'type' => 'os_poker_imsg',
      'body' => array(
        'text' => '<div class="poker_reward_reward1">You just won reward Newcomer : Player sits down at the table for the first time</div>',
        'title' => 'Reward',
      )
    )), t('Ingame notification for reward found.'));
  }

  /**
   * Verify Message on Reward from pokersocial
   *
   * The verification is done through these steps:
   * - Simulate pokersocial reward
   * - verify that the spooler contains 1 message
   * - verify that IM contains 1 message
   */

  function testMessageAndNotificationOnPokersocialReward() {
    require_once(drupal_get_path('module', 'os_poker') . "/scheduler.class.php");
		require_once(drupal_get_path('module', 'os_poker') . "/poker.class.php");
		require_once(drupal_get_path('module', 'os_poker') . "/os_poker_messages.php");

		$rew = CPoker::GetRewards();
		$player = $this->drupalCreateUser(NULL, array('profile_nickname' => 'reward_user'));
		$this->drupalLogin($player);

		/* Simulate OS Poker notify */ 
		$timestamp = time();
		$_GET['type'] = 'os_poker_reward';
		$_GET['args'] = "[15,{$player->uid},{$timestamp}]";
		
		CUserManager::instance()->DebugForceCurrentUser($this->skel_user->uid);
		ob_start();
		os_poker_process_message();
		ob_end_clean();
		CUserManager::instance()->DebugRestoreCurrentUser();

		unset($_GET["type"]);
		unset($_GET["args"]);
		
		/*
		 * Go to message box and check there is a message
		 */
    $this->drupalGet('poker/messagebox');
		
    $this->assertText(
				"You just won reward " . $rew["reward15"]["name"],
				t('Pokersocial originated reward message received')
				);
		
    $html = $this->drupalGet('poker/messages/receive');
    $this->assertRaw(json_encode(array(
																		 'type' => 'os_poker_imsg',
																		 'body' => array(
																				 'text' => '<div class="poker_reward_reward15">You just won reward ' . $rew['reward15']['name'] . ' : ' . $rew['reward15']['desc'] . '</div>',
																				 'title' => 'Reward',
																				 )
																		 )), t('Ingame notification for pokersocial originated reward found.'));
  }
	
  function testNotificationOnStatus() {
    $player = CUserManager::instance()->User($this->skel_user->uid);
    $player->chips = 10000000;
    $this->drupalGet('poker/messages/receive');
    $this->assertText(json_encode(array(
      'type' => 'os_poker_imsg',
      'body' => array(
        'text' => 'Your level changed to Rockefeller !',
        'title' => 'Level',
      )
    )), t('Ingame notification for level change found.'));
  }


  /**
   * Verify Message on Challenge
   *
   * The verification is done through these steps:
   * - Create a user, login and complete the profile.
   * - simulate a challenge by sending direcly the action in 'case "os_poker_challenge_user":'
   * - verify that user 1 spooler contains 1 message
   * - verify links are present
   */

  function testMessageAndNotificationOnChallenge(){
	require_once(drupal_get_path('module', 'os_poker') . "/scheduler.class.php");
	require_once(drupal_get_path('module', 'os_poker') . "/os_poker_messages.php");

		//logout skel_user
		$this->drupalLogout($this->skel_user);

		//Create a user to challenge
		$target_user = $this->drupalCreateUser(NULL, array('profile_nickname' => 'target_user'));
		$this->drupalLogin($target_user);


		/*
		** challenge user
		*/

		$_GET["type"] = "os_poker_challenge_user";
		$_GET["challengetarget"] = $target_user->uid;

		CUserManager::instance()->DebugForceCurrentUser($this->skel_user->uid);
		os_poker_process_message();
		CUserManager::instance()->DebugRestoreCurrentUser();

		unset($_GET["type"]);
		unset($_GET["challengetarget"]);

    /*
     * Go to message box and check there is a message
     */
		$this->drupalGet('poker/messagebox');

		$this->assertText(
				 t("You just receive a headsup challenge from !name", array('!name' => $this->skel_user->profile_name)),
				 t('Challenge message received')
			);

		$this->assertRaw(
       'javascript:parent.os_poker_start_challenge',
       t('Challenge links to react present.')
    );

		$this->assertRaw(
       'noreplace',
       t('No override class for link is present.')
    );

		$this->drupalLogout($target_user);
    //Login as challenging user.
    $this->skel_user->name = $this->skel_user->mail;
    $this->drupalLogin($this->skel_user);
    //Fetch pending ''live'' messages
    $this->drupalGet('poker/messages/receive');
    //Test for ingame notifcation.
    $this->assertText(json_encode(array(
      'type' => 'os_poker_imsg',
      'body' => array(
        'text' => t('You just challenged !user', array('!user' => 'target_user')),
        'title' => t('Challenge'),
      )
    )), t('Ingame notification for challenge found.'));
  }


  /**
   * Verify Message on table invitation
   *
   * The verification is done through these steps:
   * - Create a user, login and complete the profile.
   * - simulate a challenge by sending direcly the action in 'case "os_poker_invite_user":'
   * - verify that user 1 spooler contains 1 message
   * - verify name and table name are correct
   */
  function testMessageAndNotificationOnInvite(){
	require_once(drupal_get_path('module', 'os_poker') . "/scheduler.class.php");
	require_once(drupal_get_path('module', 'os_poker') . "/poker.class.php");
	require_once(drupal_get_path('module', 'os_poker') . "/os_poker_messages.php");

		//logout skel_user
		$this->drupalLogout($this->skel_user);

		//Create a user to challenge
		$target_user = $this->drupalCreateUser(NULL, array('profile_nickname' => 'target_user'));
		$this->drupalLogin($target_user);

		//setup and join a poker table
		$oldDb = CPoker::ChangePokerDB($this->createPokerDatabase());
		$tableid = $this->createPokerTable("TestTable");
		$this->joinPokerTable($this->skel_user, $tableid);

		/*
		** invite user
		*/

		$_GET["type"] = "os_poker_invite_user";
		$_GET["target"] = $target_user->uid;

		CUserManager::instance()->DebugForceCurrentUser($this->skel_user->uid);
		os_poker_process_message();

		unset($_GET["type"]);
		unset($_GET["target"]);

		CPoker::ChangePokerDB($oldDb);
		CUserManager::instance()->DebugRestoreCurrentUser();

    /*
     * Go to message box and check there is a message
     */
		$this->drupalGet('poker/messagebox');

		$this->assertText(
				 t("!user is playing at table !table come and join", array("!user" => $this->skel_user->profile_name, "!table" => "TestTable")),
				 t('Invitation message received')
			);

    $this->drupalLogout($target_user);

    //Login as inviting user.
    $this->skel_user->name = $this->skel_user->mail;
    $this->drupalLogin($this->skel_user);
    //Fetch pending ''live'' messages
    $this->drupalGet('poker/messages/receive');
    //Test for ingame notifcation.
    $this->assertText(json_encode(array(
      'type' => 'os_poker_imsg',
      'body' => array(
        'text' => t('You just invited !user to play', array('!user' => 'target_user')),
        'title' => t('Invitation'),
      )
    )), t('Ingame notification for invitation found.'));
  }


  /**
   * Verify Message on Gift
   *
   * The verification is done through these steps:
   * - Create a user, login and complete the profile.
   * - go to invite page, invite the email address again.
   * - Logout this user.
   * - Using the code from the invitation email, register an 'invited' new user
   * - Complete the profile page.
   * - simulate a challenge by sending direcly the action in 'case "os_poker_challenge_user":'
   * - verify that user 1 spooler contains 1 message
   *
   */

  function insertShopItemsAndCategories() {
    //db_query("INSERT INTO {poker_category} VALUES (1,'Drinks'),(2,'Snacks'),(3,'Smokes'),(4,'Entertainment')");
    //db_query("INSERT INTO {poker_item} VALUES (2,2,'sites/default/files/poker_items/item-2.jpg','Cocktail',105674,1,'next monday'),(11,1,'sites/default/files/poker_items/item-1.jpg','Test',42,1,'+3 minutes'),(1,1,'sites/default/files/poker_items/item-1.jpg','Beer',5,1,'+1 minute'),(14,3,'sites/default/files/poker_items/item-2.jpg','Test1',10,1,'+5 minutes'),(15,3,NULL,'Test2',0,1,NULL),(16,4,'sites/default/files/poker_items/item-2.jpg','Sun glasses',100,1,'+2 hour')");
  }


  function testMessageOnGift(){
	require_once(drupal_get_path('module', 'os_poker') . "/shop.class.php");


    $this->insertShopItemsAndCategories();



		/**
		 * Logout current user
		 */

		$this->drupalLogout();

		/**
		 * Register a new 'invitee' account and complete its profile.
		 */
		$user = $this->drupalCreateUser();
		// Login the user, complete profile form
		$this->OsPokerLogin($user);

		// Create a random name - email pair and send invite
		$name = $this->randomName();
		$email = $email = $this->randomName() . '@' . $this->randomName() . ".com";

		// Submit the invitation
		$this->OsPokerSendInvites(array($name => $email));

		/**
		 * Verify that invitation email was sent.
		 */
		$this->assertInviteMail(
		  $email,
		  t('Invitation email message sent for !name.', array('!name' => $name))
		);


		/**
		 * Logout current user
		 */

		$this->drupalLogout();

		/**
		 * Using invitation code, register the 'invited' user.
		 * This user has 'invited' for nickname
		 */
		// Get the invitation code from the last sent email.
		$mail_queue = end($this->drupalGetMails());
		$code = $mail_queue['params']['invite']->code;

		// Use the invitation code to login the site.
		$this->drupalGet('invite/accept/'. $code);

		// The request has to redirect to user registration form with prepopulated
		// information from the invite submission. Our email should have been
		// filled in the form with invite information.
		$this->assertFieldByName(
		  'mail',
		  $email,
		  t('Invitation verified, invited email found in registration form.')
		);

		// Complete the fields and submit the registration form.
		$password = $this->randomName();
		$options = array(
		  'name'        => $name,
		  'pass[pass1]' => $password,
		  'pass[pass2]' => $password,
		);
		$this->drupalPost($this->getUrl(), $options, t('Create new account'));
		/**
		 * completes the 'invited' profile
		 */
		$this->OsPokerProfileSubmit(array('profile_nickname' => 'invited'));


/*
** cmirey : send the gift directly
*/

   CShop::GiveItem(11, array($user->uid));


    /*
    ** Logout current user
    */

    $this->drupalLogout();

    /*
    ** Login userB
    */

    $user->name = $user->mail;
    $this->drupalLogin($user);


    /*
     * Go to message box and check there is a message
     */
	$this->drupalGet('poker/messagebox');
/* #238
	$this->assertText(
       t("You just receive a gift from "),
       t('Gift message received')
    );

	$this->assertText(
       t("Send a gift in return"),
       t('Link to react present in message')
    );
*/


  }




}
