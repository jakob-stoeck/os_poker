<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


/**
 * @file
 * Poker 4.1 Workflow sign up
 *
 */

require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

class OSPokerSignUp extends OsPokerWebTestCase {

  public static function getInfo() {
    return array(
      'name'        => '4.1 Workflow Sign up',
      'description' => 'Signup and profile functionality tests',
      'group'       => 'OS Poker Specifications',
    );
  }

  function setUp() {
    parent::setUp();
  }

  function tearDown() {
    parent::tearDown();
  }

  function testInvalidEmailAddress(){

    // Go to front page.
    $this->drupalGet('');

		$this->pass('START: The input is checked for syntax errors of the email address', 'SpecPoker');
    $this->verifyInvalidEmail('@test.com');
    $this->verifyInvalidEmail('@test.com.');
    $this->verifyInvalidEmail('asdftest.com');
    $this->verifyInvalidEmail('test@test@test.com');
    $this->verifyInvalidEmail('test@');
    $this->verifyInvalidEmail('test@.com');
    $this->verifyInvalidEmail('test @email .com');
    $this->verifyInvalidEmail('test @email.com');
    $this->verifyInvalidEmail('test<@email.com');
		$this->pass('END: The input is checked for syntax errors of the email address', 'SpecPoker');
  }

  function verifyInvalidEmail( $email = ''){
    $options = array(
      'mail' => $email,
      'pass' => $this->randomName(),
    );
  	$this->drupalPost('', $options, t('Send'));

    $this->assertResponse(
      '200',
      t("The submission produces no errors.")
    );

		$this->assertRaw(
      t('The e-mail address %email is not valid.', array('%email' => $email)),
      t('The address %email is invalid email, a message is shown.', array('%email' => $email)),
			t('SpecPoker')
    );

		$this->assertFalse(
      strpos($this->getUrl(), 'poker/first_profile'),
      t('Request is not redirected. Registration should be denied if email address is invalid.')
    );
  }

  function testPasswordPolicy() {
    $policy = _password_policy_load_active_policy();
    $this->assertNotNull($policy, 'Active password policy loaded');
    $this->assertEqual('6', $policy['policy']['length'], 'Minimum length of the password should be a least 6 characters. (1)', 'SpecPoker');
  }

  function testInvalidPassword(){
    $this->drupalGet('');
    $this->verifyInvalidPassword('');
    $this->verifyInvalidPassword('12345');
  }


  function verifyInvalidPassword( $password = ''){

		$mail = $this->randomName() . '@email.com';

    $options = array(
										 'mail' => $mail,
										 'pass' => $password,
										 );
  	$this->drupalPost('', $options, t('Send'));

    $this->assertResponse(
													'200',
													t("The submission produces no errors.")
													);

		if (empty($password))
			{
				$this->assertText(
													t('New Password field is required'),
													'Minimum length of the password should be a least 6 characters. (2)', 'SpecPoker');
			}
		else
			{
				$this->assertText(
													t('Password must be at least 6 characters in length'),
													'Minimum length of the password should be a least 6 characters. (3)', 'SpecPoker');
			}

		$this->assertFalse(strpos($this->getUrl(), 'poker/first_profile'),
											 t('Request is not redirected. Registration should be denied for invalid password.'));
  }

  function testExistingEmailInSignUp(){

    $this->drupalGet('');

    $options = array(
      'mail' => $this->randomName() . '@' . $this->randomName() . ".com",
    );
    $this->OsPokerSignUpUser($options);
    $this->OsPokerProfileSubmit();
    $this->drupalLogout();

    /**
     * Try to Sign Up using the same email address.
     */
    $options['pass'] = $this->randomName();
  	$this->drupalPost('', $options, t('Send'));
    $this->assertResponse(
      '200',
      t("The Sign Up submission produces no errors.")
    );

		$this->assertRaw(
      t('The e-mail address %email is already registered.', array('%email' => $options['mail'])),
      t('whether an user is already registered with this address'),
			t('SpecPoker')
    );
  }

  function testNicknameGeneration(){
		$this->drupalGet('');
		$mail = 'user@mail.com';
		$this->OsPokerSignUpUser(array('mail' => $mail, 'pass' => 'password'));
		$this->drupalPost($this->getUrl(), array(), t('Send'));
		$found = CUserManager::SearchUsers(array('mail' => $mail));
    $osp_user = CUserManager::instance(TRUE)->User($found[0]);
		$this->assertEqual(strpos($osp_user->profile_nickname, 'player'), 0, 'without filling in the nick field an automated nick should be created', t('SpecPoker'));
	}

  function testSkipFirstProfile(){

    $this->drupalGet('');
    $this->OsPokerSignUpUser();
		$this->assertText(
      t('1,000 Chips'),
      t('if not it\'s only 1000 chips. (1)'),
			t('SpecPoker')
    );

		$this->assertTrue(
      strpos($this->getUrl(),
      'poker/first_profile'),
      t('If everything is filled in correctly, the profile will be created on the next page')
    );

		$this->assertText(
      t('Skip this step Here'),
      t('Skip option for profile registration found.'),
			t('SpecPoker')
    );

		// same as what happens with JS function when clicking on skip or join
		// the JS functions are doing nothing but submit the form (2009-12-20)
    $this->drupalPost($this->getUrl(), array(), t('Send'));


		$this->assertTrue($this->getAbsoluteUrl(''), $this->getUrl(), 'On the home page. ' . $this->getAbsoluteUrl('') . ' == ' . $this->getUrl() );

    /**
     * the user did not fill the form and therefore only has the minimum amount.
     */
		$this->pass('All fields are optional.', t('SpecPoker'));
		$this->assertText(
      t('1,000 Chips'),
      t('if not it\'s only 1000 chips. (2)'),
			t('SpecPoker')
    );


		$this->drupalGet("poker/profile");
    $this->assertRaw(
      'images/picture-default.png',
      t('If no picture for the profile is uploaded, an anonymous pic is assigned.'),
			t('SpecPoker')
    );

  }

  function testGenderSpecificDefaultImage(){
		/* save new user profile defining sex without setting picture field */
    $this->OsPokerSignUpUser();
    $profile = array(
      'profile_nickname' => $this->randomName(),
      'profile_gender'   => t('Female'),
    );
    $this->drupalPost('poker/first_profile', $profile, t('Send'));
		$this->drupalGet("poker/profile");
    $this->assertRaw(
      t('picture_default_female'),
      t('If there is a value for sex it is specific to it, if not it is a neutral one.'),
			t('SpecPoker')
    );
	}

  function testCompleteProfileSignUp(){
    $emails = $this->drupalGetMails();
		$this->assertEqual(count($emails), 0, 'no emails in the queue');
    $this->drupalGet('');
    $this->OsPokerSignUpUser();
    $this->OsPokerProfileSubmit();
		$this->assertText(
      t('3,000 Chips'),
      t('If he filled in all profile data, he will receive a starting bonus of 3000 chips booked to his account'),
			t('SpecPoker')
    );

    $this->assertNoRaw(
      'images/picture-default.png',
      t('Additionally you can upload a profile picture.'),
			t('SpecPoker')
    );

    $emails = $this->drupalGetMails();
    $this->assertEqual(
      count($emails),
      1,
      t('Next a confirmation mail will be send'),
			t('SpecPoker')
    );
		$this->assertTrue($this->getAbsoluteUrl(''),
											$this->getUrl(),
											'the lobby page will be called ' . $this->getAbsoluteUrl('') . ' == ' . $this->getUrl(),
											t('SpecPoker'));

  }

  function testExistingNicknameProfileSignUp(){
    $this->drupalGet('');
    $this->OsPokerSignUpUser();
    $profile = array(
      'profile_nickname' => 'simpletest',
    );
    $this->OsPokerProfileSubmit($profile);
    $this->drupalLogout();

    $this->OsPokerSignUpUser();
    $profile = array(
      'profile_nickname' => 'simpletest',
      'profile_gender'   => t('Male'),
      'profile_country'  => t('France'),
      'profile_city'     => $this->randomName(),
			'files[picture_upload]' => drupal_get_path('module', 'os_poker'). 'avatar1.png',
    );
    $this->drupalPost('poker/first_profile', $profile, t('Send'));
    $this->assertRaw(
      t(' already exists.'),
      t('The nick should be unique as well'),
			t('SpecPoker')
    );

    /**
     * Verify the user is not redirected.
     */
		$this->assertTrue(
      strpos($this->getUrl(),
      'poker/first_profile'),
      t('Existing nickname does not redirect to lobby.')
    );
  }

}
