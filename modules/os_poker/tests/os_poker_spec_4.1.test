<?php
// $Id$

/**
 * @file
 * Poker 4.1 specification test case: Signup workflow
 *
 * @Note: according to irc convo, user may logout before submitting the profile.
 * <ilo--> user can logout after skipping/submitting profile?
 * <dachary> and can logout after skipping or submitting
 *
 */

/**
 * Includes the custom test case class with basic site configuration.
 */
require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

/**
 * Spec: 4.1: Workflow "Signup and profile" test case
 *
 * Verifies Signup workflow is working according to specifications.
 * Validates emails can only be registered once, nicknames are unique, user is
 * granted with +2k chips when completes its profile, or 1k if profile is not
 * completed.
 *
 * @assert: entering valid email address and valid password user registers and
 *          logs in automatically.
 * @assert: After sign up users are redirected to profile page.
 * @assert: Profile page provides a way to Skip profile submission.
 * @assert: User may logout after skip/profile completion.
 * @assert: Chips are only granted after profile skip/completion.
 * @assert: an email address can only be used once.
 * @assert: email address has valid format.
 * @assert: password length is > 6 characters.
 * @assert: chips are granted to self-registered users.
 *
 * @assert: users gets 1k chips by registration and +2k after completing its
 *          profile during signup.
 * @assert: Registration emails are being sent.
 *
 * @assert: nicknames are validated and should be unique on profile submit.
 *
 * @TODO: Player image behaviour is not yet tested. Gender/male icon if sex is
 *        especified.
 * @TODO: rename class to OsPokerSpecificationsSignUp once proppy's code has
 *        been completely migrated.
 *
 */
class OSPokerSignUp extends OsPokerWebTestCase {

  /**
   * Implementation of hook_info().
   */
  public static function getInfo() {
    return array(
      'name'        => '4.1 Workflow Signup',
      'description' => 'Signup and profile functionality tests',
      'group'       => 'OS Poker Specifications',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Enable required modules and set default site configuration.
    parent::setUp();
  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    // @TODO: Currently, when a user does signup, he is unable to logout the
    // system untill he completes the profile. This fix completes any possible
    // profile and allow the test to logout.
    $this->drupalGet('');
    if ( strpos($this->getUrl(), 'poker/first_profile') ) {
      $this->pass('INFO: FIX RESETING SIGNUP STATUS.');
      $this->OsPokerProfileSubmit();
    }

    // Remove any pending status from signup operations.
    $this->drupalLogout();
    
    parent::tearDown();
  }

  /**
   * Verify that invalid email addresses are not accepted.
   *
   * The verification is done through these steps:
   * - go to front page.
   * - submit several signup login forms with invalid email addresses.
   * - verify that invalid email message is found and the request is not
   *   redirected to profile page.
   *
   */
  function testInvalidEmailAddress(){

    /**
     * Go to front page.
     */
    $this->drupalGet('');

    /**
     * Submit several invalid email addresses.
     * Watch out: name@domain (withouth LTD is a valid domain name).
     */
    $this->verifyInvalidEmail('@test.com');
    $this->verifyInvalidEmail('asdf@test.com.');
    $this->verifyInvalidEmail('@test.com.');
    $this->verifyInvalidEmail('asdftest.com');
    $this->verifyInvalidEmail('test@test@test.com');
    $this->verifyInvalidEmail('test@');
    $this->verifyInvalidEmail('test@.com');
    $this->verifyInvalidEmail('test @email .com');
    $this->verifyInvalidEmail('test @email.com');
    $this->verifyInvalidEmail('test<@email.com');
  }

  /**
   * Submits the Signup form with an invalid email address and expect to find
   * error message
   *
   * @param string $email address to validate.
   */
  function verifyInvalidEmail( $email = ''){
    // options for the signup form.
    $options = array(
      'mail' => $email,
      'pass' => $this->randomName(),
    );
  	$this->drupalPost('', $options, t('Send'));

    // Verify page is found and access is granted.
    $this->assertResponse(
      '200',
      t("The submission produces no errors.")
    );

    // Verify a message for the invalid address error is shown.
		$this->assertRaw(
      t('The e-mail address %email is not valid.', array('%email' => $email)),
      t('The address %email is validated as invalid email, a message is shown.', array('%email' => $email))
    );

    // Make sure the request has not been redirected to profile page.
		$this->assertFalse(
      strpos($this->getUrl(),
      'poker/first_profile'),
      t('Request is not redirected. Registration should be denied if email address is invalid.')
    );
  }

  /**
   * Verify that minimum password length is validated
   *
   * The verification is done through these steps:
   * - go to front page.
   * - submit several signup login forms with invalid passwords.
   * - verify that invalid password message is found and the request is not
   *   redirected to profile page.
   *
   */
  function testInvalidPassword(){

    /**
     * Go to front page.
     */
    $this->drupalGet('');

    /**
     * Submit a signup form with invalid passwords
     * @TODO: with password enforcement try other passwords complexity.
     */
    $this->verifyInvalidPassword('');
    $this->verifyInvalidPassword('1');
    $this->verifyInvalidPassword('12');
    $this->verifyInvalidPassword('123');
    $this->verifyInvalidPassword('1234');
    $this->verifyInvalidPassword('12345');
  }


  /**
   * Submits the Signup form with an invalid password field and expect to find
   * error message
   *
   * @param string $password to validate.
   */
  function verifyInvalidPassword( $password = ''){

    $this->pass(t('Testing with "%password" password', array('%password' => $password)));

    // options for the signup form.
    $options = array(
      'mail' => $this->randomName() . '@email.com',
      'pass' => $password,
    );
  	$this->drupalPost('', $options, t('Send'));

    // Verify page is found and access is granted.
    $this->assertResponse(
      '200',
      t("The submission produces no errors.")
    );

    // Verify a message for the invalid address error is shown.
		$this->assertRaw(
      t('The password must be at least 6 characters.'),
      t('4.1 Minimum length of the password should be a least 6 characters.')
    );

    // Make sure the request has not been redirected to profile page.
		$this->assertFalse(
      strpos($this->getUrl(),
      'poker/first_profile'),
      t('Request is not redirected. Registration should be denied for invalid password.')
    );
  }

  /**
   * Verify email is already registered during the sign up process.
   *
   * The verification is done through these steps:
   * - go to front page.
   * - Sign up with a valid password and valid email address.
   * - Complete its profile.
   * - Log out that user.
   * - Try to sign up again using the same password.
   * - Verify the sign up process is interrumpted and a message is shown.
   * - Verify the request is not redirected to first profile page.
   *
   */
  function testExistingEmailInSignUp(){

    /**
     * Go to front page.
     */
    $this->drupalGet('');

    /**
     * Sign Up with valid email address and password.
     */
    $options = array(
      'mail' => $this->randomName() . '@' . $this->randomName() . ".com",
    );
    $this->OsPokerSignUpUser($options);

    /**
     * Completes its registration with dummy data.
     */
    $this->OsPokerProfileSubmit();

    /**
     * Logout this user.
     */
    $this->drupalLogout();

    /**
     * Try to Sign Up using the same email address.
     */
    // Email is already defined in $options
    $options['pass'] = $this->randomName();
    // Submit the sign up form
  	$this->drupalPost('', $options, t('Send'));

    // Verify page is found and access is granted.
    $this->assertResponse(
      '200',
      t("The Sign Up submission produces no errors.")
    );

    // Verify a message for the invalid address error is shown.
		$this->assertRaw(
      t('The e-mail address %email is already registered.', array('%email' => $options['mail'])),
      t('4.1 Email address is already registered successfully verified.')
    );

    // Make sure the request has NOT been redirected to first profile page.
		$this->assertFalse(
      strpos($this->getUrl(),
      'poker/first_profile'),
      t('Request redirected to profile page, signup accepted.')
    );
  }

  /**
   * Verify user can logout before skipping / submitting the first profile
   *
   * The verification is done through these steps:
   * - go to front page.
   * - Sign up with a valid password and valid email address.
   * - Log out that user.
   * - go to any page.
   * - verify the user is not redirected to first profile.
   *
   */
  function testExistingSignupLogout(){

    /**
     * Go to front page.
     */
    $this->drupalGet('');

    /**
     * Sign Up with valid email address and password.
     */
    $options = array(
      'mail' => $this->randomName() . '@' . $this->randomName() . ".com",
    );
    $this->OsPokerSignUpUser($options);

    /**
     * Logout this user.
     */
    $this->drupalLogout();

    /**
     * Verify the user has logged out
     */
    $this->drupalGet('user');

    /**
     * Verify the user is not redirected to first profile.
     */
		$this->assertFalse(
      strpos($this->getUrl(),
      'poker/first_profile'),
      t('User cant logout the site during sign up.')
    );

  }



  /**
   * Verify the sign up process Skipping profile generation
   *
   * The verification is done through these steps:
   * - go to front page.
   * - Sign up with a valid password and valid email address.
   * - Verify the form submission is redirected to profile page.
   * - Verify user has no chips yet untill profile skip/completion.
   * - Verify that Skip option is available on profile form.
   * - Verify Clicking skip option and verify user is redirected to lobby.
   *   Note: Clicking Skip is the same as submit the form with default options.
   * - Verify user is granted with $1k chips due to profile skip.
   *
   */
  function testSkipSignUp(){

    /**
     * Go to front page.
     */
    $this->drupalGet('');

    /**
     * Sign Up with valid user and password.
     */
    $this->OsPokerSignUpUser();

    /**
     * Verify user has no chips.
     */
		$this->assertText(
      t('You have $ 0 chips'),
      t('User has no chips untill profile skip/completion.')
    );

    /**
     * Verify the skip option is available.
     */
		$this->assertText(
      t('Skip this step Here'),
      t('Skip option for profile registration found.')
    );

    /**
     * Verify clicking Skip redirects to lobby.
     * @TODO: mimic javascript, submit the form with default options.
     */
		// $this->clickLink('Here');
    $this->drupalPost($this->getUrl(), array(), t('Send'));

    /**
     * Verify the user is redirected to lobby (Home page).
     */
		$this->assertFalse(
      strpos($this->getUrl(),
      'poker/first_profile'),
      t('Profile skip redirects to lobby.')
    );

    /**
     * Verify the user is granted with $1k chips.
     */
		$this->assertText(
      t('You have $ 1,000 Chips'),
      t('User is granted with 1k chips when skips the profile page.')
    );
  }

  /**
   * Verify the sign up process completing profile generation
   *
   * The verification is done through these steps:
   * - go to front page.
   * - Sign up with a valid password and valid email address.
   * - Verify the form submission is redirected to profile page.
   * - Verify user has no chips yet untill profile skip/completion.
   * - Submit profile page with a valid nickname.
   * - Verify the user is redirected to lobby.
   * - Verify user is granted with $3k chips due to profile completion.
   * - Verify user image is not site's default image.
   * - Go to use page and find the "Member for" string to verify registration
   *   timestamp is being tracked.
   *
   */
  function testCompleteProfileSignUp(){

    /**
     * Go to front page.
     */
    $this->drupalGet('');

    /**
     * Sign Up with valid user and password.
     */
    $this->OsPokerSignUpUser();

    /**
     * Verify no email is sent.
     */
    $emails = $this->drupalGetMails();
    $this->assertEqual(
      count($emails),
      0,
      t('No email is sent for account Signup.')
    );

    /**
     * Verify user has no chips.
     */
		$this->assertText(
      t('You have $ 0 Chips'),
      t('User has no chips untill profile skip/completion.')
    );

    /**
     * Submit dummy profile
     */
    $this->OsPokerProfileSubmit();

    /**
     * Verify the user is granted with $1k chips.
     */
		$this->assertText(
      t('You have $ 3,000 Chips'),
      t('User is granted with $3k chips when completes the profile page.')
    );

    /**
     * Verify the default user image is not used.
     */
    $this->assertNoRaw(
      'images/picture-default.png',
      t('Default user image is not used when user submits its own image.')
    );

    /**
     * Verify an email is sent.
     */
    $emails = $this->drupalGetMails();
    $this->assertEqual(
      count($emails),
      1,
      t('An email is sent for profile submission (skip/complete).')
    );

    /**
     * Verify registration timestamp is tracked
     */
    $this->drupalGet('user');
		$this->assertText(
      t('0 sec'),
      t('User registration timestamp is tracked.')
    );

  }

  /**
   * Verify nickname is in use during profile completion process.
   *
   * The verification is done through these steps:
   * - go to front page.
   * - Sign up with a valid password and valid email address.
   * - Complete its profile with a know nickname.
   * - Log out that user.
   * - Sign up with a valid password and valid email address.
   * - Try to complete the profile again using the same nickname.
   * - Verify the submitting an existing nickname interrumpts the profile sub.
   * - Verify a message is shown to inform the nickname is already in use.
   *
   */
  function testExistingNicknameProfileSignUp(){

    /**
     * Go to front page.
     */
    $this->drupalGet('');

    /**
     * Sign Up with random valid email address and password.
     */
    $this->OsPokerSignUpUser();

    /**
     * Completes its registration with known nickname data.
     */
    $profile = array(
      'profile_nickname' => 'simpletest',
    );
    $this->OsPokerProfileSubmit($profile);

    /**
     * Logout this user.
     */
    $this->drupalLogout();

    /**
     * Sign Up other user with random valid email address and password.
     */
    $this->OsPokerSignUpUser();

    /**
     * Try to submit the profile with an existing nickname.
     */
    $profile = array(
      'profile_nickname' => 'simpletest',
      'profile_gender'   => t('Male'),
      'profile_country'  => t('France'),
      'profile_city'     => $this->randomName(),
			'files[picture_upload]' => drupal_get_path('module', 'os_poker'). 'avatar1.png',
    );
    $this->drupalPost('poker/first_profile', $profile, t('Send'));

    /**
     * Verify a message is shown informing the nickname is in use.
     * @Note: have to limit the search to the end of the string, looks like php
     * strpos() is giving errors with this text, have to dig more to understand
     * what is wrong here.
     */
    $this->assertRaw(
      t(' already exists.'),
      t('An error message is shown if nickname already exists.')
    );

    /**
     * Verify the user is not redirected.
     */
		$this->assertTrue(
      strpos($this->getUrl(),
      'poker/first_profile'),
      t('Existing nickname does not redirect to lobby.')
    );
  }

}
