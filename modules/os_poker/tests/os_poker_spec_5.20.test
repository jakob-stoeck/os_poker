<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

class OSPokerUserSearch extends OsPokerWebTestCase {

  protected $skel_user;

  public static function getInfo() {
    return array(
      'name'        => '5.20 Search Buddy',
      'description' => 'User search functionality tests',
      'group'       => 'OS Poker Specifications',
    );
  }

  function setUp() {
    parent::setUp();

    $this->main_user = $this->drupalCreateUser();
    $this->OsPokerLogin($this->main_user, array('profile_nickname' => 'main_user'));

  }

  function tearDown() {
    parent::tearDown();
  }


	function testFail() {
/* #238
		// 2 users exist, one is logged in, the other is not, search all without filter returns two, search
		// all with filter returns one
		$this->fail('TEST PROBLEM http://drupal-dev.pokersource.info/trac/ticket/49 filters search by online / offline', 'SpecPoker');
		$this->fail('TEST PROBLEM http://drupal-dev.pokersource.info/trac/ticket/49 join table: invokes the invite process (shows only when user is online)', 'SpecPoker');
		$this->fail('failed search show error message with button to go back to the search');
		$this->fail('button challenge:  invokes the challenge process', 'SpecPoker');
*/
	}

  function  testSearching() {
    $profiles = array(
      0 => array('profile_country'=>'FR', 'profile_city'=>'Paris', 'profile_gender'=>'Male'),
      1 => array('profile_country'=>'FR', 'profile_city'=>'Nantes', 'profile_gender'=>'Male'),
      2 => array('profile_country'=>'BE', 'profile_city'=>'Bruxelles', 'profile_gender'=>'Male'),
      3 => array('profile_country'=>'BE', 'profile_city'=>'Namur', 'profile_gender'=>'Male'),
      4 => array('profile_country'=>'FR', 'profile_city'=>'Paris', 'profile_gender'=>'Female'),
      5 => array('profile_country'=>'FR', 'profile_city'=>'Nantes', 'profile_gender'=>'Female'),
    );
    $chips = array(
      5 => 1000000,
      4 => 500000,
      3 => 250000,
      2 => 100000,
      1 => 50000,
      0 => 10000,
    );
    $users = array();
    foreach($profiles as $key => $profile) {
      $user = $this->OsPokerCreateUserWithProfile($profile);
      $users[$key] = CUserManager::instance()->User($user->uid);
      $users[$key]->chips = $chips[$key];
      $users[$key]->Save();
      $this->pass(t('User !name created with !count chips.', array('!name' => $users[$key]->profile_nickname, '!count' => $users[$key]->Chips())));
    }
		// set last user online
		/* cmirey: ERROR => Table 'drupal6.simpletest377220session' doesn't exist query: INSERT INTO simpletest377220session (sid, uid, timestamp) VALUES ("1", 0, 0) */
		//		update_sql('INSERT INTO {session} (`sid`, `uid`, `timestamp`) VALUES ("%s", %d, %d)', 'simpletest-'.$this->randomString(), $user->uid, time() - 120);

    
    //User search without param returns all
    $this->drupalPost('poker/buddies/search', array(), t("Send"));
    foreach($users as $user) {
      $this->assertRaw(theme('username', $user), t('User %nickname found is search results', array('%nickname' => $user->profile_nickname)));
    }

    //User search only online
		/* cmirey: our current user (main_user here) appears online in search results, so check only main_user appears */
    $this->drupalPost('poker/buddies/search', array("online_only"=>1), t("Send"));
    $this->assertText("main_user", t('User %nickname found in search results', array('%nickname' => "main_user")));
    foreach($users as $user) {
      $this->assertNoRaw(theme('username', $user), t('User %nickname not found in search results', array('%nickname' => $user->profile_nickname)));
    }
    
		//
		// assert that all fields are used as a criterion in the search and
		// combined with AND by exploring all field combinations.
		//
		$this->pass('Registered users can search others by nick (or part of it), sex, city, country,level or a combination of 2 or more of it (operator is and).', 'SpecPoker');
    $searches = array(
      'profile_country' => 'FR',
      'profile_city' => 'Paris',
      'profile_gender' => 'Male',
    );
    foreach($searches as $k => $v) {
      $this->drupalPost('poker/buddies/search', array($k => $v), t("Send"));
      foreach($users as $user) {
        if($user->{$k} == $v) {
          $this->assertRaw(theme('username', $user), t('User %nickname found is search results', array('%nickname' => $user->profile_nickname)));
        }
        else {
          $this->assertNoRaw(theme('username', $user), t('User %nickname not found is search results', array('%nickname' => $user->profile_nickname)));
        }
      }
    }

    foreach($profiles as $pk => $profile) {
      $this->drupalPost('poker/buddies/search', $profile, t("Send"));
      foreach($users as $uk => $user) {
        if($pk == $uk) {
          $this->assertRaw(theme('username', $user), t('User %nickname found is search results', array('%nickname' => $user->profile_nickname)));
        } else {
          $this->assertNoRaw(theme('username', $user), t('User %nickname not found is search results', array('%nickname' => $user->profile_nickname)));
        }
      }      
    }
    foreach($chips as $key => $value) {
      $this->drupalPost('poker/buddies/search', array('level' => $value), t("Send"));
      foreach($users as $uk => $user) {
        if($key <= $uk) {
          $this->assertRaw(theme('username', $user), t('User %nickname found is search results', array('%nickname' => $user->profile_nickname)));
        } else {
          $this->assertNoRaw(theme('username', $user), t('User %nickname not found is search results', array('%nickname' => $user->profile_nickname)));
        }
      }
    }


  }
}