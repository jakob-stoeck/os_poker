<?php // -*- mode: php; tab-width: 2 -*-
//
//    Copyright (C) 2009, 2010 Pokermania
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

class OSPokerLogin extends OsPokerWebTestCase {

  /**
   * Implementation of hook_info().
   */
  public static function getInfo() {
    return array(
      'name'        => '4.2 Workflow Login',
      'description' => 'Login functionality tests',
      'group'       => 'OS Poker Specifications',
    );
  }

  function setUp() {
    parent::setUp();

  }

  function tearDown() {
    parent::tearDown();
  }

  function testInvalidLogin(){

    $options = array(
      'name' => $this->randomName() . '@' . $this->randomName() . ".com",
      'pass' => $this->randomName(),
    );
    $this->drupalPost('', $options, t('Log in'));

    /**
     * Verify error message is present.
     */
     $this->assertText(
       t('Sorry, unrecognized username or password.'),
       t('If the combination of email and password is incorrect, an error message is displayed on the index page.'),
			 t('SpecPoker')
     );

  }

  function testRememberMeLogin(){
  
	$root = $this->drupalCreateUser(array('administer blocks', 'administer users', 'administer site configuration'));
	$this->drupalLogin($root);
	$this->drupalPost('poker/first_profile', array(), t('Send'));
	
	$params = array(
		"remember_me_checkbox"	=> 1,
		"remember_me_lifetime"	=> 2419200,
		"remember_me_managed"	=> 1,
		"remember_me_phantom_session"	=> 1,
	);
	
	$this->drupalPost('admin/settings/remember_me', $params, t('Save configuration'));
	$this->drupalGet('admin/settings/remember_me');
	$this->drupalLogout($root);
  
    $options = array(
      'mail' => $this->randomName() . '@' . $this->randomName() . ".com",
      'pass' => $this->randomName(),
    );
    $this->OsPokerSignUpUser($options);
    $this->OsPokerProfileSubmit();
    $this->drupalLogout();
	

    $login = array(
      'name' => $options['mail'],
      'pass' => $options['pass'],
      'remember_me' => 1,
    );
    $this->drupalPost('', $login, t('Log in'));

    $headers = $this->drupalGetHeaders(TRUE);
	
	$this->assertTrue(TRUE, json_encode($headers));
	
    $this->assertTrue(
						(isset($headers[0]) && isset($headers[0]['set-cookie'])),
						t('Server send cookie information')
						);
											
	$parts = explode(';', $headers[0]['set-cookie']);
	
	$this->assertTrue(TRUE, $parts[0]);

    $this->assertTrue(
      strpos(
        $parts[0],
        '=deleted'
      ),
      t('Previous cookie has been deleted.')
    );

	$this->assertTrue(TRUE, $parts[1]);
	
    $this->assertTrue(
      strpos(
        $parts[1],
        'expires='
      ),
      t('Previous cookie has been expired.')
    );

	$this->assertTrue(TRUE, $parts[3]);
	$this->assertTrue(TRUE, "Wainting : " . date("r", strtotime("+4 Weeks")));
	
    $this->assertTrue(
      strpos(
        $parts[3],
        'expires='
      ),
      t('New cookie expiration time sent.')
    );
	
	
	
	$this->fail(
      t('Checking the remember me box creates a cookie which remembers the user\'s settings'),
			t('SpecPoker')
    );

  }

  function testRedirectAfterSecondLoginProfileComplete() {

	$userA = $this->drupalCreateUser();
	
	$this->OsPokerLogin($userA, array('profile_nickname' => 'userA'));
	
	//Test an CDelayMessage has been created to redirect user on the next login
	
	CUserManager::instance()->DebugForceCurrentUser($userA->uid);
	
	CScheduler::instance()->ReloadTasks();
	$mbox = CScheduler::instance()->GetTasks("login");
	$this->assertTrue(count($mbox) > 0, "There is a task for login event");
	CUserManager::instance()->DebugRestoreCurrentUser();
	
	$is_delay_msg = FALSE;
	foreach ($mbox as $msg)
	{
		if ($msg->type == "CDelayMessage")
		{
			$is_delay_msg = TRUE;
			break;
		}
	}
	
	$this->assertTrue($is_delay_msg, "Message is of type CDelayMessage");
	
    $this->drupalLogout();
	
	//Should call trigger "login"
    $this->drupalLogin($userA);

	CUserManager::instance()->DebugForceCurrentUser($userA->uid);
	CScheduler::instance()->ReloadTasks();
	$mbox = CScheduler::instance()->GetTasks("live");
	CUserManager::instance()->DebugRestoreCurrentUser();
	
	$this->assertTrue(count($mbox) > 0, "There is a task for live event");
	
	$is_message = FALSE;
	$args = array();
	foreach ($mbox as $msg)
	{
		if ($msg->type == "CMessage")
		{
			$is_message = TRUE;
			$args = json_decode($msg->arguments, TRUE);
			break;
		}
	}
	
	$this->assertTrue($is_message, "CDelayMessage has been converted to CMessage");
	$this->assertTrue($args["type"] == 'os_poker_jump', "Message triggers client side 'os_poker_jump'");
	
	$this->assertTrue(strpos($args["body"]["url"], "poker/buddies/invite") !== FALSE, "Redirect to buddies invite page");
	$this->assertTrue($args["body"]["lightbox"], "Page must open in a thickbox");
  }
  
  
  
  function testRedirectAfterSecondLoginProfileIncomplete() {

	$userA = $this->drupalCreateUser();
	
	$this->drupalLogin($userA);
	$this->OsPokerProfileSkip();
	
	//Test an CDelayMessage has been created to redirect user on the next login
	
	CUserManager::instance()->DebugForceCurrentUser($userA->uid);
	
	CScheduler::instance()->ReloadTasks();
	$mbox = CScheduler::instance()->GetTasks("login");
	$this->assertTrue(count($mbox) > 0, "There is a task for login event");
	CUserManager::instance()->DebugRestoreCurrentUser();
	
	$is_delay_msg = FALSE;
	foreach ($mbox as $msg)
	{
		if ($msg->type == "CDelayMessage")
		{
			$is_delay_msg = TRUE;
			break;
		}
	}
	
	$this->assertTrue($is_delay_msg, "Message is of type CDelayMessage");
	
    $this->drupalLogout();
	
	//Should call trigger "login"
    $this->drupalLogin($userA);

	CUserManager::instance()->DebugForceCurrentUser($userA->uid);
	CScheduler::instance()->ReloadTasks();
	$mbox = CScheduler::instance()->GetTasks("live");
	CUserManager::instance()->DebugRestoreCurrentUser();
	
	$this->assertTrue(count($mbox) > 0, "There is a task for live event");
	
	$is_message = FALSE;
	$args = array();
	foreach ($mbox as $msg)
	{
		if ($msg->type == "CMessage")
		{
			$is_message = TRUE;
			$args = json_decode($msg->arguments, TRUE);
			break;
		}
	}
	
	$this->assertTrue($is_message, "CDelayMessage has been converted to CMessage");
	$this->assertTrue($args["type"] == 'os_poker_jump', "Message triggers client side 'os_poker_jump'");
	
	$this->assertTrue(strpos($args["body"]["url"], "poker/profile/update") !== FALSE, "Redirect to profile update page");
	$this->assertTrue($args["body"]["lightbox"], "Page must open in a thickbox");
  }

}
