<?php
// $Id$

/**
 * @file
 * Poker 5.5 specification test case: Virtual Goods / Digital Assets workflow
 *
 */

/**
 * Includes the custom test case class with basic site configuration.
 */
require_once(dirname(__FILE__) .'/os_poker_test_case.tinc');

/**
 * Spec: 5.5: Workflow "Virtual Goods / Digital Assets" test case
 *
 * Verifies Virtual Goods / Digital Assets workflow is working according to specifications.
 * Validates virtual goods can be purchased and shows on user profiles.
 *
 * @assert: The user can go to the "personal view" from the "Shop" main
 *          navigation entry.
 * @assert: From the "personal view" the user can select an item to purchase it
 *          for himself.The button to buy an item for the player himself
 *          displays the amount of chips necessary for purchase.
 * @assert: From the "peronal view" the user can select an item to purchase it
 *          for all his/her buddies. The button to buy an item for all buddies
 *          displays the grand total (price of item multiplied by nb. of
 *          buddies who accept gifts)
 *
 * @assert: The user can go to the "buddy/player view" from a link labelled
 *          "send gift" from any kind of buddy/player listing.
 * @assert: From the "buddy/player view" the user can select an item to purchase
 *          it for the selected buddy. The button to buy the item for the
 *          selected buddy displays the amount of chips necessary for purchase.
 * @assert: From the "buddy/player view" the user can select an item to purchase
 *          it for all his/her buddies. The button to buy an item for all
 *          buddies displays the grand total (price of item multiplied by nb. of
 *          buddies who accept gifts)
 *
 * @assert: The user can go to the "table view" using the button send gift shown
 *          on the "Medium Profile" of a player.
 * @assert: From the "table view" the user can select an item to purchase it for
 *          the selected player. The button to buy the item for the selected
 *          player displays the amount of chips necessary for purchase.
 * @assert: From the "table view" the user can select an item to purchase
 *          it for the players at his/her table. The button to buy an item for
 *          all players displays the grand total (price of item multiplied by
 *          nb. of players at the table who accept gifts)
 * @assert: From the "table view" the user can select an item to purchase
 *          it for his/her buddies at his/her table. The button to buy an item
 *          for all buddies displays the grand total (price of item multiplied
 *          by nb. of buddies at the table who accept gifts)
 *
 * @assert: If a player selected "I donâ€™t accept gifts" in his settings the
 *          button "send gift" will not be displayed on his profile,
 *          medium profile and all buddy lists.
 *
 * @assert: If a player receives an item a notification process (message,
 *          ingame notification) is triggered. He will be granted the option to
 *          "send a gift" in return. This is done by opening the Buddy/Player
 *          view of the catalogue.
 *
 * @assert: All virtual goods a player owns are shown on the "recent gifts"
 *          page.
 *
 * @assert: From the "peronal view" the use has got the option to activate one
 *          of his/her items which are still valid using a button labelled
 *          "activate".
 *
 * @assert: Only one item can have the status "activated".
 * @assert: If not set by the user it is automatically the last item he
 *          received.
 * @assert: The activated item of a user will be shown at the table during the
 *          game.
 *
 */
class OSPokerSpecificationsVirtualGoods extends OsPokerWebTestCase {

  /**
   * Implementation of hook_info().
   */
  public static function getInfo() {
    return array(
      'name'        => '5.5 Virtual Goods / Digital Assets',
      'description' => 'Virtual Goods / Digital Assets functionality tests',
      'group'       => 'OS Poker Specifications',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Enable required modules and set default site configuration.
    parent::setUp();

    //Crreate some items and categories
    $this->insertShopItemsAndCategories();

    //Create three users
    for ($i = 0; $i < 3; $i++) {
      $buddy = $this->users[] = $this->OsPokerCreateUserWithProfile();
    }

  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  function insertShopItemsAndCategories() {
    db_query("INSERT INTO {poker_category} VALUES (1,'Drinks'),(2,'Snacks'),(3,'Smokes'),(4,'Entertainment')");
    db_query("INSERT INTO {poker_item} VALUES (2,2,'sites/default/files/poker_items/item-2.jpg','Cocktail',105674,1,'next monday'),
											(11,1,'sites/default/files/poker_items/item-1.jpg','TestItem',42,1,'+3 minutes'),
											(1,1,'sites/default/files/poker_items/item-1.jpg','Beer',5,1,'+1 minute'),
											(14,3,'sites/default/files/poker_items/item-2.jpg','Test1',10,1,'+5 minutes'),
											(15,3,'sites/default/files/poker_items/item-2.jpg','Test2',20,1, '+2 secondes'),
											(16,4,'sites/default/files/poker_items/item-2.jpg','Sun glasses',100,1,'+2 hour')");
  }

  function createPokerDatabase() {
    static $POKER_DB;
    if(!isset($POKER_DB)) {
      $POKER_DB = "pythonpokernetworktest";
      require_once(drupal_get_path('module', 'os_poker') . "/poker.class.php");

      shell_exec("mysqladmin -f -u root drop $POKER_DB");
      shell_exec("mysqladmin -u root create $POKER_DB");
      shell_exec("mysql -u root $POKER_DB < /usr/share/poker-network/schema.sql");
      global $db_url;
      if (is_string($db_url)) { $db_url = array('default' => $db_url); } // Thanks Bdragon
      $db_url[$POKER_DB] = "mysql://root@localhost/$POKER_DB";
    }
    return $POKER_DB;
  }

  function joinPokerTable($user, $game_id) {
    $previous_db = db_set_active($this->createPokerDatabase());
    $sql = "INSERT INTO user2table VALUES (%d, 42, 0, 0)";
    db_query($sql, $user->uid);
    db_set_active($previous_db);
  }


  /*
   * Verify that
   * - The user can go to the "personal view" from the "Shop" main navigation
   *   entry.
   * - From the "personal view" the user can select an item to purchase it for
   *   himself.The button to buy an item for the player himself displays the
   *   amount of chips necessary for purchase.
   * - From the "peronal view" the user can select an item to purchase it for
   *   all his/her buddies. The button to buy an item for all buddies displays
   *   the grand total (price of item multiplied by nb. of buddies who accept
   *   gifts)
   *
   * The verification is done through these steps:
   *  - Go to the front page
   *  - Search and click the "Shop" link
   *  - Verify that we are now on the "personal view" of the catalogue
   *  - Search for the "buy for me" button of the an item
   *  - Search for the "buy for all buddies" button of the an item
   */
  function testPersonalView() {
    $this->fail('TODO');
  }

  /**
   * Verify that
   * - The user can go to the "buddy/player view" from a link labelled "send
   *   gift" from any kind of buddy/player listing.
   * - From the "buddy/player view" the user can select an item to purchase it
   *   for the selected buddy. The button to buy the item for the selected buddy
   *    displays the amount of chips necessary for purchase.
   * - From the "buddy/player view" the user can select an item to purchase it
   *   for all his/her buddies. The button to buy an item for all buddies
   *   displays the grand total (price of item multiplied by nb. of buddies who
   *   accept gifts)
   *
   * The verification is done through these steps:
   *  - Go to the buddy list page
   *  - Search and click the "send gift" link
   *  - Verify that we are now on the "buddy/player view" of the catalogue
   *  - Search for the "buy for selected buddy" button of the an item
   *  - Search for the "buy for all buddies" button of the an item
   *
   */
  function testBuddyPlayerView() {
    $this->fail('TODO');
  }

  /**
   * Verify that
   * - The user can go to the "table view" using the button "send gift" shown on
   *   the "Medium Profile" of a player.
   * - From the "table view" the user can select an item to purchase it for the
   *   selected player. The button to buy the item for the selected player
   *   displays the amount of chips necessary for purchase.
   * - From the "table view" the user can select an item to purchase it for the
   *   players at his/her table. The button to buy an item for all players
   *   displays the grand total (price of item multiplied by nb. of players at
   *   the table who accept gifts)
   * - From the "table view" the user can select an item to purchase it for
   *   his/her buddies at his/her table. The button to buy an item for all
   *   buddies displays the grand total (price of item multiplied by nb. of
   *   buddies at the table who accept gifts)
   *
   * The verification is done through these steps:
   *  - Initialize a table with the all users
   *  - Go to the table page (TODO how ?)
   *  - Click the "medium profile" link for one player
   *  - Search and click the "send gift" link
   *  - Verify that we are now on the "table view" of the catalogue
   *  - Search for the "buy for selected player" button of the an item
   *  - Search for the "buy for all player" button of the an item
   *  - Search for the "buy for all buddies at table" button of the an item
   */
  function testTableView() {

    foreach($this->users as $user) {
      $this->joinPokerTable($user, 42);
    }
    $this->drupalLogin($this->users[0]);
    $this->fail('TODO');
  }

  /**
   * Verify that all virtual goods a player owns are shown on the "recent gifts"
   * page
   *
   * The verification is done through these steps:
   * - Login as first user
   * - Give item to second user (using direct access to the CShop class)
   * - Login as second user
   * - Go to user profile
   * - Verify that the name of all given item is on the page
   *
   */
  function testOwnedItemsOnProfile() {
    require_once(drupal_get_path('module', 'os_poker') . "/shop.class.php");
    $this->drupalLogin($this->users[0]);
    $items = array(
      11 => 'TestItem',
      2 => 'Cocktail',
      1 => 'Beer',
    );
    /* give items to second user*/
    foreach(array_keys($items) as $item_id) {
      CShop::GiveItem($item_id, array($this->users[1]));
    }
    $this->drupalLogin($this->users[1]);
    $this->drupalGet('poker/profile');
    $all_found = true;
    foreach($items as $name) {
      $all_found = $all_found & $this->assertText($name, t('Item  %name found on user profile.', array('%name' => $name)));
    }
    $this->assertTrue($all_found, 'All virtual goods a player owns are shown on the "recent gifts" page', 'Specs');
  }

  /**
   * Verify item expiry
   *
   * The verification is done through these steps:
   * - Buy item Test1 which expires after 5 minutes and item Test2 which expires after 2 secondes
   * - Wait a second
   * - Verify that Test1 still here and Test2 has expired
   *
   */
  function testItemExpiry() {
    require_once(drupal_get_path('module', 'os_poker') . "/shop.class.php");

    $items = array(
      14 => 'Test1',
      15 => 'Test2',
    );
	
	$usr = CUserManager::instance()->CurrentUser(TRUE);
	
	$this->assertTrue(TRUE, json_encode($usr->profile_nickname));
	
    /* give items to first user*/
	// CShop::GiveItem call CUserManager::instance()->CurrentUser() to determine the source
	// so we need to use the helper forcing the current user 
	CUserManager::instance()->DebugForceCurrentUser($this->users[0]->uid);
	
	$u = CUserManager::instance()->CurrentUser();
	
	$this->assertEqual($u->uid, $this->users[0]->uid, "Current User switched");
	
    foreach(array_keys($items) as $item_id)
	{
		CShop::GiveItem($item_id, array($this->users[1]->uid), TRUE);
    }
	//restore current user
	CUserManager::instance()->DebugRestoreCurrentUser();
	
	//Create Cuser
	$cuser = CUserManager::instance()->User($this->users[1]->uid);
	$this->assertNotNull($cuser, "CUser instancied for user : " . $this->users[1]->uid);
	
	//Get inventory
	$inventory = $cuser->Items();
	$this->assertEqual(count($inventory), 2, "User has 2 items");
	
	//wait for expiry
	sleep(3);
	
	//Activate tasks
	$tasks = CScheduler::GetUserTasks($cuser->uid);
	CScheduler::TriggerHelper("live", $cuser, $tasks);
	
	//Reloads items
	$inventory = $cuser->Items();
	
	$this->assertEqual(count($inventory), 1, "User has 1 item");
	$this->assertEqual($inventory[0]->id_item, 14, "Remaining item is Test1");
  }

  
  
}
