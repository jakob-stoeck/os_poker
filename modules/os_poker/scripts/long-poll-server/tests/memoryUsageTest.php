<?php
/*
os-poker-poll server
Copyright (C) 2010 Pierre Buyle <pierre@buyle.org>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
require_once 'PHPUnit/Framework.php';
require_once 'PHPUnit/Extensions/Database/TestCase.php';
require_once 'PHPUnit/Extensions/Database/DataSet/CsvDataSet.php';
require_once 'PHPUnit/Extensions/Database/DataSet/DataSetFilter.php';
require_once 'PHPUnit/Extensions/OutputTestCase.php';
require_once dirname(__FILE__).'/../longPollServer.php';

/**
 * Test class for drupalDao.
 * Generated by PHPUnit on 2010-04-28 at 08:14:29.
 */
class drupalDaoTest extends PHPUnit_Extensions_Database_TestCase {
  /**
   * @var    drupalDao
   * @access protected
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   *
   * @access protected
   */
  protected function setUp() {
    $this->object = new drupalDao('localhost', 'root', '', 'phpunit');
    parent::setUp();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   *
   * @access protected
   */
  protected function tearDown() {
    parent::tearDown();
  }

  protected function getConnection() {
    $pdo = new PDO('mysql:host=localhost;dbname=phpunit', 'root', '');
    return $this->createDefaultDBConnection($pdo, 'phpunit');
  }

  protected function getDataSet() {
   $dataset = new PHPUnit_Extensions_Database_DataSet_CsvDataSet(';', "'");
   $dataset->addTable('polling_messages', dirname(__FILE__).'/fixtures/polling_messages.csv');
   $dataset->addTable('polling_users', dirname(__FILE__).'/fixtures/polling_users.csv');
   $dataset->addTable('sessions', dirname(__FILE__).'/fixtures/sessions.csv');
   return $dataset;
  }

  public function testMemoryUsage() {
    $db = $this->getConnection()->getConnection();
    $mu = array(1000 =>  memory_get_usage(), 2499 => memory_get_usage()+1);
    for ($pass = 1; $pass < 2500; $pass++) {
      $this->object->get_uid_for_session('c4ca4238a0b923820dcc509a6f75849b');
      $this->object->get_messages();
      if ($pass == 1000 || $pass == 2499) {
        $mu[$pass]  = memory_get_usage();
      }
      /*if ($pass % 100 == 0) {
        print("Memory usage after pass #$pass: ". memory_get_usage() ."\n");
      }*/
      $db->query("INSERT INTO polling_messages (uid, message) VALUES (1, 's:$pass:\"".str_repeat('x', $pass)."\";')");
    }
    $this->assertTrue($mu[1000] >= $mu[2499]);
  }
}
?>
