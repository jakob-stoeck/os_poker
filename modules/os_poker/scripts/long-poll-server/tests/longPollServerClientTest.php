<?php
/*
os-poker-poll server
Copyright (C) 2010 Pierre Buyle <pierre@buyle.org>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
require_once 'PHPUnit/Framework.php';
require_once 'PHPUnit/Extensions/OutputTestCase.php';

require_once dirname(__FILE__).'/../longPollServer.php';
require_once 'testableLongPollServerClient.php';

/**
 * Test class for longPollServerClient.
 * Generated by PHPUnit on 2010-04-28 at 08:14:29.
 */
class longPollServerClientTest extends PHPUnit_Extensions_OutputTestCase {
  /**
   * @var    longPollServerClient
   * @access protected
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   *
   * @access protected
   */
  protected function setUp() {
    $this->object = new testableLongPollServerClient();
    $this->object->dao = $this->getMock('longPollDao');
    $this->object->server = $this->getMock('longPollServer', array(), array('testableLongPollServerClient'));
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   *
   * @access protected
   */
  protected function tearDown() {
  }

  public function testOnConnect() {
    $this->object->on_connect();
    //Nothing to test...
  }

  public function testDelayedWrite() {
    $client = $this->object;
    $client->read_buffer = "GET foo HTTP/1.0\nCookie: SESS2ce663502eee6ea0bb7870a703cb92fa=aaa\n\n";

    $client->dao->expects($this->any())
      ->method('get_uid_for_session')
      ->with($this->equalTo('aaa'))
      ->will($this->returnCallback('hexdec'));

    $client->server->expects($this->at(0))
      ->method('get_messages')
      ->with($this->equalTo(hexdec('aaa')))
      ->will($this->returnValue(array()));
    $client->server->expects($this->at(1))
      ->method('get_messages')
      ->with($this->equalTo(hexdec('aaa')))
      ->will($this->returnValue(array('foo', 'bar')));

    $client->on_read();
    $this->assertEquals('', $client->read_buffer);
    $this->assertContains('HTTP/1.0 200', $client->output);
    $this->assertNotContains('Content-Length:', $client->output);
    $this->assertFalse($client->disconnected);
    $client->on_timer();
    $this->assertContains('Content-Length:', $client->output);
    $body = json_encode(array(
      'errorMsg' => null,
      'error' => false,
      'messages' => array('foo', 'bar'),
    ));
    $this->assertContains("\r\n\r\n". $body, $client->output);
    $this->assertTrue($client->disconnected);
  }

  /**
   * @dataProvider requestProvider
   */
  public function testResponseCode($request, $response, $output = NULL) {
    $client = $this->object;
    $client->read_buffer = $request . "\n\n";
    
    $client->dao->expects($this->any())
      ->method('get_uid_for_session')
      ->will($this->returnCallback('hexdec'));
    $client->server->expects($this->any())
      ->method('get_messages')
      ->will($this->returnValue(array('foo', 'bar')));

    $client->on_read();
    $this->assertEquals('', $client->read_buffer);
    $this->assertContains($response, $client->output);
    $this->assertTrue($client->disconnected);
    if($output) {
      $this->expectOutputRegex('/'. preg_quote($output) .'/');
    }
  }

  public function requestProvider() {
    return array(
      array('GET foo HTTP/1.0','HTTP/1.0 403'),
      array('GET foo HTTP/1.1','HTTP/1.1 403'),
      array('GET foo HTTP/2.0','HTTP/2.0 505'),
      array('POST foo HTTP/1.0','HTTP/1.0 405'),
      array('POST foo HTTP/1.0','HTTP/1.0 405'),
      array("GET foo HTTP/1.0\nCookie: SESS2ce663502eee6ea0bb7870a703cb92fa=aaa",'HTTP/1.0 200'),
      array("GET foo HTTP/1.0\nCookie: SESS2ce663502eee6ea0bb7870a703cb92fa=ABC",'HTTP/1.0 200'),
      array("GET foo HTTP/1.0\nCookie: SESS2ce663502eee6ea0bb7870a703cb92fa=Z",'HTTP/1.0 403'),
      array("GET foo HTTP/1.0\nCookie: SESS2ce663502eee6ea0bb7870a703cb92fz=aaa",'HTTP/1.0 403'),
      array(
        "GET foo HTTP/1.0\nCookie: SESS2ce663502eee6ea0bb7870a703cb92fb=bbb; SESS2ce663502eee6ea0bb7870a703cb92fa=aaa",
        'HTTP/1.0 200',
        '[ERROR] Multiple sessions in client request: [sess2ce663502eee6ea0bb7870a703cb92fb=bbb, sess2ce663502eee6ea0bb7870a703cb92fa=aaa]'
      ),
      array(
        "GET foo HTTP/1.0\nCookie: SESS2ce663502eee6ea0bb7870a703cb92fb=0; SESS2ce663502eee6ea0bb7870a703cb92fa=0",
        'HTTP/1.0 403',
        '[ERROR] Multiple sessions in client request: [sess2ce663502eee6ea0bb7870a703cb92fb=0, sess2ce663502eee6ea0bb7870a703cb92fa=0]'
      ),
    );
  }
}
?>
